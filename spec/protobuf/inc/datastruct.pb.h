// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datastruct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_datastruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_datastruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_datastruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_datastruct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datastruct_2eproto;
class Proto3CMDFieldCfg;
class Proto3CMDFieldCfgDefaultTypeInternal;
extern Proto3CMDFieldCfgDefaultTypeInternal _Proto3CMDFieldCfg_default_instance_;
class Proto3DeviceAllCMD;
class Proto3DeviceAllCMDDefaultTypeInternal;
extern Proto3DeviceAllCMDDefaultTypeInternal _Proto3DeviceAllCMD_default_instance_;
class Proto3DeviceCMDDefine;
class Proto3DeviceCMDDefineDefaultTypeInternal;
extern Proto3DeviceCMDDefineDefaultTypeInternal _Proto3DeviceCMDDefine_default_instance_;
class Proto3DeviceInfoCfg;
class Proto3DeviceInfoCfgDefaultTypeInternal;
extern Proto3DeviceInfoCfgDefaultTypeInternal _Proto3DeviceInfoCfg_default_instance_;
class Proto3ProtocolFieldCfg;
class Proto3ProtocolFieldCfgDefaultTypeInternal;
extern Proto3ProtocolFieldCfgDefaultTypeInternal _Proto3ProtocolFieldCfg_default_instance_;
class Proto3ProtocolTypeCfg;
class Proto3ProtocolTypeCfgDefaultTypeInternal;
extern Proto3ProtocolTypeCfgDefaultTypeInternal _Proto3ProtocolTypeCfg_default_instance_;
class TDSData;
class TDSDataDefaultTypeInternal;
extern TDSDataDefaultTypeInternal _TDSData_default_instance_;
class TDSDataPayload;
class TDSDataPayloadDefaultTypeInternal;
extern TDSDataPayloadDefaultTypeInternal _TDSDataPayload_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto3CMDFieldCfg* Arena::CreateMaybeMessage<::Proto3CMDFieldCfg>(Arena*);
template<> ::Proto3DeviceAllCMD* Arena::CreateMaybeMessage<::Proto3DeviceAllCMD>(Arena*);
template<> ::Proto3DeviceCMDDefine* Arena::CreateMaybeMessage<::Proto3DeviceCMDDefine>(Arena*);
template<> ::Proto3DeviceInfoCfg* Arena::CreateMaybeMessage<::Proto3DeviceInfoCfg>(Arena*);
template<> ::Proto3ProtocolFieldCfg* Arena::CreateMaybeMessage<::Proto3ProtocolFieldCfg>(Arena*);
template<> ::Proto3ProtocolTypeCfg* Arena::CreateMaybeMessage<::Proto3ProtocolTypeCfg>(Arena*);
template<> ::TDSData* Arena::CreateMaybeMessage<::TDSData>(Arena*);
template<> ::TDSDataPayload* Arena::CreateMaybeMessage<::TDSDataPayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Proto3ProtocolTypeCfg_protoFormat : int {
  Proto3ProtocolTypeCfg_protoFormat_FORMAT_ASCII = 0,
  Proto3ProtocolTypeCfg_protoFormat_FORMAT_HEX = 1,
  Proto3ProtocolTypeCfg_protoFormat_FORMAT_ASCII_HEX = 2,
  Proto3ProtocolTypeCfg_protoFormat_Proto3ProtocolTypeCfg_protoFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Proto3ProtocolTypeCfg_protoFormat_Proto3ProtocolTypeCfg_protoFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Proto3ProtocolTypeCfg_protoFormat_IsValid(int value);
constexpr Proto3ProtocolTypeCfg_protoFormat Proto3ProtocolTypeCfg_protoFormat_protoFormat_MIN = Proto3ProtocolTypeCfg_protoFormat_FORMAT_ASCII;
constexpr Proto3ProtocolTypeCfg_protoFormat Proto3ProtocolTypeCfg_protoFormat_protoFormat_MAX = Proto3ProtocolTypeCfg_protoFormat_FORMAT_ASCII_HEX;
constexpr int Proto3ProtocolTypeCfg_protoFormat_protoFormat_ARRAYSIZE = Proto3ProtocolTypeCfg_protoFormat_protoFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Proto3ProtocolTypeCfg_protoFormat_descriptor();
template<typename T>
inline const std::string& Proto3ProtocolTypeCfg_protoFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Proto3ProtocolTypeCfg_protoFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Proto3ProtocolTypeCfg_protoFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Proto3ProtocolTypeCfg_protoFormat_descriptor(), enum_t_value);
}
inline bool Proto3ProtocolTypeCfg_protoFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Proto3ProtocolTypeCfg_protoFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Proto3ProtocolTypeCfg_protoFormat>(
    Proto3ProtocolTypeCfg_protoFormat_descriptor(), name, value);
}
enum Proto3ProtocolFieldCfg_dataType : int {
  Proto3ProtocolFieldCfg_dataType_DATATYPE_DEFAULT = 0,
  Proto3ProtocolFieldCfg_dataType_DATATYPE_STR = 1,
  Proto3ProtocolFieldCfg_dataType_DATATYPE_UINT_STR = 2,
  Proto3ProtocolFieldCfg_dataType_DATATYPE_INT_STR = 3,
  Proto3ProtocolFieldCfg_dataType_DATATYPE_FLOAT_STR = 4,
  Proto3ProtocolFieldCfg_dataType_DATATYPE_END = 5,
  Proto3ProtocolFieldCfg_dataType_DATATYPE_HEX = 6,
  Proto3ProtocolFieldCfg_dataType_DATATYPE_HEX_STR = 7,
  Proto3ProtocolFieldCfg_dataType_DATATYPE_DOUBLE = 8,
  Proto3ProtocolFieldCfg_dataType_DATATYPE_PAYLOAD = 9,
  Proto3ProtocolFieldCfg_dataType_DATATYPE_INT8 = 10,
  Proto3ProtocolFieldCfg_dataType_DATATYPE_TIMESTR = 11,
  Proto3ProtocolFieldCfg_dataType_Proto3ProtocolFieldCfg_dataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Proto3ProtocolFieldCfg_dataType_Proto3ProtocolFieldCfg_dataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Proto3ProtocolFieldCfg_dataType_IsValid(int value);
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg_dataType_dataType_MIN = Proto3ProtocolFieldCfg_dataType_DATATYPE_DEFAULT;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg_dataType_dataType_MAX = Proto3ProtocolFieldCfg_dataType_DATATYPE_TIMESTR;
constexpr int Proto3ProtocolFieldCfg_dataType_dataType_ARRAYSIZE = Proto3ProtocolFieldCfg_dataType_dataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Proto3ProtocolFieldCfg_dataType_descriptor();
template<typename T>
inline const std::string& Proto3ProtocolFieldCfg_dataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Proto3ProtocolFieldCfg_dataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Proto3ProtocolFieldCfg_dataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Proto3ProtocolFieldCfg_dataType_descriptor(), enum_t_value);
}
inline bool Proto3ProtocolFieldCfg_dataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Proto3ProtocolFieldCfg_dataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Proto3ProtocolFieldCfg_dataType>(
    Proto3ProtocolFieldCfg_dataType_descriptor(), name, value);
}
enum TDSDataPayload_Operation : int {
  TDSDataPayload_Operation_OPERATION_ADD = 0,
  TDSDataPayload_Operation_OPERATION_DEL = 1,
  TDSDataPayload_Operation_OPERATION_UPDATE = 2,
  TDSDataPayload_Operation_OPERATION_QUERY = 3,
  TDSDataPayload_Operation_TDSDataPayload_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TDSDataPayload_Operation_TDSDataPayload_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TDSDataPayload_Operation_IsValid(int value);
constexpr TDSDataPayload_Operation TDSDataPayload_Operation_Operation_MIN = TDSDataPayload_Operation_OPERATION_ADD;
constexpr TDSDataPayload_Operation TDSDataPayload_Operation_Operation_MAX = TDSDataPayload_Operation_OPERATION_QUERY;
constexpr int TDSDataPayload_Operation_Operation_ARRAYSIZE = TDSDataPayload_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDSDataPayload_Operation_descriptor();
template<typename T>
inline const std::string& TDSDataPayload_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TDSDataPayload_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TDSDataPayload_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TDSDataPayload_Operation_descriptor(), enum_t_value);
}
inline bool TDSDataPayload_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TDSDataPayload_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TDSDataPayload_Operation>(
    TDSDataPayload_Operation_descriptor(), name, value);
}
enum TDSData_Flags : int {
  TDSData_Flags_NORMAL_DISPATCH = 0,
  TDSData_Flags_FULL_DISPATCH = 1,
  TDSData_Flags_TDSData_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TDSData_Flags_TDSData_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TDSData_Flags_IsValid(int value);
constexpr TDSData_Flags TDSData_Flags_Flags_MIN = TDSData_Flags_NORMAL_DISPATCH;
constexpr TDSData_Flags TDSData_Flags_Flags_MAX = TDSData_Flags_FULL_DISPATCH;
constexpr int TDSData_Flags_Flags_ARRAYSIZE = TDSData_Flags_Flags_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDSData_Flags_descriptor();
template<typename T>
inline const std::string& TDSData_Flags_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TDSData_Flags>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TDSData_Flags_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TDSData_Flags_descriptor(), enum_t_value);
}
inline bool TDSData_Flags_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TDSData_Flags* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TDSData_Flags>(
    TDSData_Flags_descriptor(), name, value);
}
// ===================================================================

class Proto3ProtocolTypeCfg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3ProtocolTypeCfg) */ {
 public:
  inline Proto3ProtocolTypeCfg() : Proto3ProtocolTypeCfg(nullptr) {}
  virtual ~Proto3ProtocolTypeCfg();

  Proto3ProtocolTypeCfg(const Proto3ProtocolTypeCfg& from);
  Proto3ProtocolTypeCfg(Proto3ProtocolTypeCfg&& from) noexcept
    : Proto3ProtocolTypeCfg() {
    *this = ::std::move(from);
  }

  inline Proto3ProtocolTypeCfg& operator=(const Proto3ProtocolTypeCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proto3ProtocolTypeCfg& operator=(Proto3ProtocolTypeCfg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proto3ProtocolTypeCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto3ProtocolTypeCfg* internal_default_instance() {
    return reinterpret_cast<const Proto3ProtocolTypeCfg*>(
               &_Proto3ProtocolTypeCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Proto3ProtocolTypeCfg& a, Proto3ProtocolTypeCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(Proto3ProtocolTypeCfg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proto3ProtocolTypeCfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proto3ProtocolTypeCfg* New() const final {
    return CreateMaybeMessage<Proto3ProtocolTypeCfg>(nullptr);
  }

  Proto3ProtocolTypeCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proto3ProtocolTypeCfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proto3ProtocolTypeCfg& from);
  void MergeFrom(const Proto3ProtocolTypeCfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto3ProtocolTypeCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3ProtocolTypeCfg";
  }
  protected:
  explicit Proto3ProtocolTypeCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastruct_2eproto);
    return ::descriptor_table_datastruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Proto3ProtocolTypeCfg_protoFormat protoFormat;
  static constexpr protoFormat FORMAT_ASCII =
    Proto3ProtocolTypeCfg_protoFormat_FORMAT_ASCII;
  static constexpr protoFormat FORMAT_HEX =
    Proto3ProtocolTypeCfg_protoFormat_FORMAT_HEX;
  static constexpr protoFormat FORMAT_ASCII_HEX =
    Proto3ProtocolTypeCfg_protoFormat_FORMAT_ASCII_HEX;
  static inline bool protoFormat_IsValid(int value) {
    return Proto3ProtocolTypeCfg_protoFormat_IsValid(value);
  }
  static constexpr protoFormat protoFormat_MIN =
    Proto3ProtocolTypeCfg_protoFormat_protoFormat_MIN;
  static constexpr protoFormat protoFormat_MAX =
    Proto3ProtocolTypeCfg_protoFormat_protoFormat_MAX;
  static constexpr int protoFormat_ARRAYSIZE =
    Proto3ProtocolTypeCfg_protoFormat_protoFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  protoFormat_descriptor() {
    return Proto3ProtocolTypeCfg_protoFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& protoFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, protoFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function protoFormat_Name.");
    return Proto3ProtocolTypeCfg_protoFormat_Name(enum_t_value);
  }
  static inline bool protoFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      protoFormat* value) {
    return Proto3ProtocolTypeCfg_protoFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProtoNameFieldNumber = 2,
    kProtoIdFieldNumber = 1,
    kFormatFieldNumber = 3,
  };
  // string protoName = 2;
  void clear_protoname();
  const std::string& protoname() const;
  void set_protoname(const std::string& value);
  void set_protoname(std::string&& value);
  void set_protoname(const char* value);
  void set_protoname(const char* value, size_t size);
  std::string* mutable_protoname();
  std::string* release_protoname();
  void set_allocated_protoname(std::string* protoname);
  private:
  const std::string& _internal_protoname() const;
  void _internal_set_protoname(const std::string& value);
  std::string* _internal_mutable_protoname();
  public:

  // int32 protoId = 1;
  void clear_protoid();
  ::PROTOBUF_NAMESPACE_ID::int32 protoid() const;
  void set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protoid() const;
  void _internal_set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Proto3ProtocolTypeCfg.protoFormat format = 3;
  void clear_format();
  ::Proto3ProtocolTypeCfg_protoFormat format() const;
  void set_format(::Proto3ProtocolTypeCfg_protoFormat value);
  private:
  ::Proto3ProtocolTypeCfg_protoFormat _internal_format() const;
  void _internal_set_format(::Proto3ProtocolTypeCfg_protoFormat value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3ProtocolTypeCfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protoname_;
  ::PROTOBUF_NAMESPACE_ID::int32 protoid_;
  int format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastruct_2eproto;
};
// -------------------------------------------------------------------

class Proto3ProtocolFieldCfg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3ProtocolFieldCfg) */ {
 public:
  inline Proto3ProtocolFieldCfg() : Proto3ProtocolFieldCfg(nullptr) {}
  virtual ~Proto3ProtocolFieldCfg();

  Proto3ProtocolFieldCfg(const Proto3ProtocolFieldCfg& from);
  Proto3ProtocolFieldCfg(Proto3ProtocolFieldCfg&& from) noexcept
    : Proto3ProtocolFieldCfg() {
    *this = ::std::move(from);
  }

  inline Proto3ProtocolFieldCfg& operator=(const Proto3ProtocolFieldCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proto3ProtocolFieldCfg& operator=(Proto3ProtocolFieldCfg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proto3ProtocolFieldCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto3ProtocolFieldCfg* internal_default_instance() {
    return reinterpret_cast<const Proto3ProtocolFieldCfg*>(
               &_Proto3ProtocolFieldCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Proto3ProtocolFieldCfg& a, Proto3ProtocolFieldCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(Proto3ProtocolFieldCfg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proto3ProtocolFieldCfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proto3ProtocolFieldCfg* New() const final {
    return CreateMaybeMessage<Proto3ProtocolFieldCfg>(nullptr);
  }

  Proto3ProtocolFieldCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proto3ProtocolFieldCfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proto3ProtocolFieldCfg& from);
  void MergeFrom(const Proto3ProtocolFieldCfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto3ProtocolFieldCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3ProtocolFieldCfg";
  }
  protected:
  explicit Proto3ProtocolFieldCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastruct_2eproto);
    return ::descriptor_table_datastruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Proto3ProtocolFieldCfg_dataType dataType;
  static constexpr dataType DATATYPE_DEFAULT =
    Proto3ProtocolFieldCfg_dataType_DATATYPE_DEFAULT;
  static constexpr dataType DATATYPE_STR =
    Proto3ProtocolFieldCfg_dataType_DATATYPE_STR;
  static constexpr dataType DATATYPE_UINT_STR =
    Proto3ProtocolFieldCfg_dataType_DATATYPE_UINT_STR;
  static constexpr dataType DATATYPE_INT_STR =
    Proto3ProtocolFieldCfg_dataType_DATATYPE_INT_STR;
  static constexpr dataType DATATYPE_FLOAT_STR =
    Proto3ProtocolFieldCfg_dataType_DATATYPE_FLOAT_STR;
  static constexpr dataType DATATYPE_END =
    Proto3ProtocolFieldCfg_dataType_DATATYPE_END;
  static constexpr dataType DATATYPE_HEX =
    Proto3ProtocolFieldCfg_dataType_DATATYPE_HEX;
  static constexpr dataType DATATYPE_HEX_STR =
    Proto3ProtocolFieldCfg_dataType_DATATYPE_HEX_STR;
  static constexpr dataType DATATYPE_DOUBLE =
    Proto3ProtocolFieldCfg_dataType_DATATYPE_DOUBLE;
  static constexpr dataType DATATYPE_PAYLOAD =
    Proto3ProtocolFieldCfg_dataType_DATATYPE_PAYLOAD;
  static constexpr dataType DATATYPE_INT8 =
    Proto3ProtocolFieldCfg_dataType_DATATYPE_INT8;
  static constexpr dataType DATATYPE_TIMESTR =
    Proto3ProtocolFieldCfg_dataType_DATATYPE_TIMESTR;
  static inline bool dataType_IsValid(int value) {
    return Proto3ProtocolFieldCfg_dataType_IsValid(value);
  }
  static constexpr dataType dataType_MIN =
    Proto3ProtocolFieldCfg_dataType_dataType_MIN;
  static constexpr dataType dataType_MAX =
    Proto3ProtocolFieldCfg_dataType_dataType_MAX;
  static constexpr int dataType_ARRAYSIZE =
    Proto3ProtocolFieldCfg_dataType_dataType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  dataType_descriptor() {
    return Proto3ProtocolFieldCfg_dataType_descriptor();
  }
  template<typename T>
  static inline const std::string& dataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, dataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function dataType_Name.");
    return Proto3ProtocolFieldCfg_dataType_Name(enum_t_value);
  }
  static inline bool dataType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      dataType* value) {
    return Proto3ProtocolFieldCfg_dataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 3,
    kValueFieldNumber = 5,
    kMinFieldNumber = 6,
    kMaxFieldNumber = 7,
    kProtoIdFieldNumber = 1,
    kFieldIndexFieldNumber = 2,
    kFieldSizeFieldNumber = 4,
    kOffsetFieldNumber = 8,
    kTypeFieldNumber = 9,
  };
  // string fieldName = 3;
  void clear_fieldname();
  const std::string& fieldname() const;
  void set_fieldname(const std::string& value);
  void set_fieldname(std::string&& value);
  void set_fieldname(const char* value);
  void set_fieldname(const char* value, size_t size);
  std::string* mutable_fieldname();
  std::string* release_fieldname();
  void set_allocated_fieldname(std::string* fieldname);
  private:
  const std::string& _internal_fieldname() const;
  void _internal_set_fieldname(const std::string& value);
  std::string* _internal_mutable_fieldname();
  public:

  // string value = 5;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string min = 6;
  void clear_min();
  const std::string& min() const;
  void set_min(const std::string& value);
  void set_min(std::string&& value);
  void set_min(const char* value);
  void set_min(const char* value, size_t size);
  std::string* mutable_min();
  std::string* release_min();
  void set_allocated_min(std::string* min);
  private:
  const std::string& _internal_min() const;
  void _internal_set_min(const std::string& value);
  std::string* _internal_mutable_min();
  public:

  // string max = 7;
  void clear_max();
  const std::string& max() const;
  void set_max(const std::string& value);
  void set_max(std::string&& value);
  void set_max(const char* value);
  void set_max(const char* value, size_t size);
  std::string* mutable_max();
  std::string* release_max();
  void set_allocated_max(std::string* max);
  private:
  const std::string& _internal_max() const;
  void _internal_set_max(const std::string& value);
  std::string* _internal_mutable_max();
  public:

  // int32 protoId = 1;
  void clear_protoid();
  ::PROTOBUF_NAMESPACE_ID::int32 protoid() const;
  void set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protoid() const;
  void _internal_set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fieldIndex = 2;
  void clear_fieldindex();
  ::PROTOBUF_NAMESPACE_ID::int32 fieldindex() const;
  void set_fieldindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fieldindex() const;
  void _internal_set_fieldindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fieldSize = 4;
  void clear_fieldsize();
  ::PROTOBUF_NAMESPACE_ID::int32 fieldsize() const;
  void set_fieldsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fieldsize() const;
  void _internal_set_fieldsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 offset = 8;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .Proto3ProtocolFieldCfg.dataType type = 9;
  void clear_type();
  ::Proto3ProtocolFieldCfg_dataType type() const;
  void set_type(::Proto3ProtocolFieldCfg_dataType value);
  private:
  ::Proto3ProtocolFieldCfg_dataType _internal_type() const;
  void _internal_set_type(::Proto3ProtocolFieldCfg_dataType value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3ProtocolFieldCfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fieldname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_;
  ::PROTOBUF_NAMESPACE_ID::int32 protoid_;
  ::PROTOBUF_NAMESPACE_ID::int32 fieldindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 fieldsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastruct_2eproto;
};
// -------------------------------------------------------------------

class Proto3DeviceInfoCfg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3DeviceInfoCfg) */ {
 public:
  inline Proto3DeviceInfoCfg() : Proto3DeviceInfoCfg(nullptr) {}
  virtual ~Proto3DeviceInfoCfg();

  Proto3DeviceInfoCfg(const Proto3DeviceInfoCfg& from);
  Proto3DeviceInfoCfg(Proto3DeviceInfoCfg&& from) noexcept
    : Proto3DeviceInfoCfg() {
    *this = ::std::move(from);
  }

  inline Proto3DeviceInfoCfg& operator=(const Proto3DeviceInfoCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proto3DeviceInfoCfg& operator=(Proto3DeviceInfoCfg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proto3DeviceInfoCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto3DeviceInfoCfg* internal_default_instance() {
    return reinterpret_cast<const Proto3DeviceInfoCfg*>(
               &_Proto3DeviceInfoCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Proto3DeviceInfoCfg& a, Proto3DeviceInfoCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(Proto3DeviceInfoCfg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proto3DeviceInfoCfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proto3DeviceInfoCfg* New() const final {
    return CreateMaybeMessage<Proto3DeviceInfoCfg>(nullptr);
  }

  Proto3DeviceInfoCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proto3DeviceInfoCfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proto3DeviceInfoCfg& from);
  void MergeFrom(const Proto3DeviceInfoCfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto3DeviceInfoCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3DeviceInfoCfg";
  }
  protected:
  explicit Proto3DeviceInfoCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastruct_2eproto);
    return ::descriptor_table_datastruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDEVNAMEFieldNumber = 2,
    kCMDEXCELPATHFieldNumber = 3,
    kCOMUNITATEMODEFieldNumber = 4,
    kTCPIPFieldNumber = 5,
    kUDPIPSRCFieldNumber = 7,
    kUDPIPDSTFieldNumber = 9,
    kUDPMCIPFieldNumber = 11,
    kUDPMCIPTXFieldNumber = 12,
    kUDPMCIPRXFieldNumber = 14,
    kIDFieldNumber = 1,
    kTCPPORTFieldNumber = 6,
    kUDPPORTSRCFieldNumber = 8,
    kUDPPORTDSTFieldNumber = 10,
    kUDPMCPORTTXFieldNumber = 13,
    kUDPMCPORTRXFieldNumber = 15,
  };
  // string DEV_NAME = 2;
  void clear_dev_name();
  const std::string& dev_name() const;
  void set_dev_name(const std::string& value);
  void set_dev_name(std::string&& value);
  void set_dev_name(const char* value);
  void set_dev_name(const char* value, size_t size);
  std::string* mutable_dev_name();
  std::string* release_dev_name();
  void set_allocated_dev_name(std::string* dev_name);
  private:
  const std::string& _internal_dev_name() const;
  void _internal_set_dev_name(const std::string& value);
  std::string* _internal_mutable_dev_name();
  public:

  // string CMD_EXCEL_PATH = 3;
  void clear_cmd_excel_path();
  const std::string& cmd_excel_path() const;
  void set_cmd_excel_path(const std::string& value);
  void set_cmd_excel_path(std::string&& value);
  void set_cmd_excel_path(const char* value);
  void set_cmd_excel_path(const char* value, size_t size);
  std::string* mutable_cmd_excel_path();
  std::string* release_cmd_excel_path();
  void set_allocated_cmd_excel_path(std::string* cmd_excel_path);
  private:
  const std::string& _internal_cmd_excel_path() const;
  void _internal_set_cmd_excel_path(const std::string& value);
  std::string* _internal_mutable_cmd_excel_path();
  public:

  // string COMUNITATE_MODE = 4;
  void clear_comunitate_mode();
  const std::string& comunitate_mode() const;
  void set_comunitate_mode(const std::string& value);
  void set_comunitate_mode(std::string&& value);
  void set_comunitate_mode(const char* value);
  void set_comunitate_mode(const char* value, size_t size);
  std::string* mutable_comunitate_mode();
  std::string* release_comunitate_mode();
  void set_allocated_comunitate_mode(std::string* comunitate_mode);
  private:
  const std::string& _internal_comunitate_mode() const;
  void _internal_set_comunitate_mode(const std::string& value);
  std::string* _internal_mutable_comunitate_mode();
  public:

  // string TCP_IP = 5;
  void clear_tcp_ip();
  const std::string& tcp_ip() const;
  void set_tcp_ip(const std::string& value);
  void set_tcp_ip(std::string&& value);
  void set_tcp_ip(const char* value);
  void set_tcp_ip(const char* value, size_t size);
  std::string* mutable_tcp_ip();
  std::string* release_tcp_ip();
  void set_allocated_tcp_ip(std::string* tcp_ip);
  private:
  const std::string& _internal_tcp_ip() const;
  void _internal_set_tcp_ip(const std::string& value);
  std::string* _internal_mutable_tcp_ip();
  public:

  // string UDP_IP_SRC = 7;
  void clear_udp_ip_src();
  const std::string& udp_ip_src() const;
  void set_udp_ip_src(const std::string& value);
  void set_udp_ip_src(std::string&& value);
  void set_udp_ip_src(const char* value);
  void set_udp_ip_src(const char* value, size_t size);
  std::string* mutable_udp_ip_src();
  std::string* release_udp_ip_src();
  void set_allocated_udp_ip_src(std::string* udp_ip_src);
  private:
  const std::string& _internal_udp_ip_src() const;
  void _internal_set_udp_ip_src(const std::string& value);
  std::string* _internal_mutable_udp_ip_src();
  public:

  // string UDP_IP_DST = 9;
  void clear_udp_ip_dst();
  const std::string& udp_ip_dst() const;
  void set_udp_ip_dst(const std::string& value);
  void set_udp_ip_dst(std::string&& value);
  void set_udp_ip_dst(const char* value);
  void set_udp_ip_dst(const char* value, size_t size);
  std::string* mutable_udp_ip_dst();
  std::string* release_udp_ip_dst();
  void set_allocated_udp_ip_dst(std::string* udp_ip_dst);
  private:
  const std::string& _internal_udp_ip_dst() const;
  void _internal_set_udp_ip_dst(const std::string& value);
  std::string* _internal_mutable_udp_ip_dst();
  public:

  // string UDPMC_IP = 11;
  void clear_udpmc_ip();
  const std::string& udpmc_ip() const;
  void set_udpmc_ip(const std::string& value);
  void set_udpmc_ip(std::string&& value);
  void set_udpmc_ip(const char* value);
  void set_udpmc_ip(const char* value, size_t size);
  std::string* mutable_udpmc_ip();
  std::string* release_udpmc_ip();
  void set_allocated_udpmc_ip(std::string* udpmc_ip);
  private:
  const std::string& _internal_udpmc_ip() const;
  void _internal_set_udpmc_ip(const std::string& value);
  std::string* _internal_mutable_udpmc_ip();
  public:

  // string UDPMC_IP_TX = 12;
  void clear_udpmc_ip_tx();
  const std::string& udpmc_ip_tx() const;
  void set_udpmc_ip_tx(const std::string& value);
  void set_udpmc_ip_tx(std::string&& value);
  void set_udpmc_ip_tx(const char* value);
  void set_udpmc_ip_tx(const char* value, size_t size);
  std::string* mutable_udpmc_ip_tx();
  std::string* release_udpmc_ip_tx();
  void set_allocated_udpmc_ip_tx(std::string* udpmc_ip_tx);
  private:
  const std::string& _internal_udpmc_ip_tx() const;
  void _internal_set_udpmc_ip_tx(const std::string& value);
  std::string* _internal_mutable_udpmc_ip_tx();
  public:

  // string UDPMC_IP_RX = 14;
  void clear_udpmc_ip_rx();
  const std::string& udpmc_ip_rx() const;
  void set_udpmc_ip_rx(const std::string& value);
  void set_udpmc_ip_rx(std::string&& value);
  void set_udpmc_ip_rx(const char* value);
  void set_udpmc_ip_rx(const char* value, size_t size);
  std::string* mutable_udpmc_ip_rx();
  std::string* release_udpmc_ip_rx();
  void set_allocated_udpmc_ip_rx(std::string* udpmc_ip_rx);
  private:
  const std::string& _internal_udpmc_ip_rx() const;
  void _internal_set_udpmc_ip_rx(const std::string& value);
  std::string* _internal_mutable_udpmc_ip_rx();
  public:

  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 TCP_PORT = 6;
  void clear_tcp_port();
  ::PROTOBUF_NAMESPACE_ID::int32 tcp_port() const;
  void set_tcp_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tcp_port() const;
  void _internal_set_tcp_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 UDP_PORT_SRC = 8;
  void clear_udp_port_src();
  ::PROTOBUF_NAMESPACE_ID::int32 udp_port_src() const;
  void set_udp_port_src(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_udp_port_src() const;
  void _internal_set_udp_port_src(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 UDP_PORT_DST = 10;
  void clear_udp_port_dst();
  ::PROTOBUF_NAMESPACE_ID::int32 udp_port_dst() const;
  void set_udp_port_dst(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_udp_port_dst() const;
  void _internal_set_udp_port_dst(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 UDPMC_PORT_TX = 13;
  void clear_udpmc_port_tx();
  ::PROTOBUF_NAMESPACE_ID::int32 udpmc_port_tx() const;
  void set_udpmc_port_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_udpmc_port_tx() const;
  void _internal_set_udpmc_port_tx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 UDPMC_PORT_RX = 15;
  void clear_udpmc_port_rx();
  ::PROTOBUF_NAMESPACE_ID::int32 udpmc_port_rx() const;
  void set_udpmc_port_rx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_udpmc_port_rx() const;
  void _internal_set_udpmc_port_rx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3DeviceInfoCfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_excel_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comunitate_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tcp_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udp_ip_src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udp_ip_dst_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udpmc_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udpmc_ip_tx_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udpmc_ip_rx_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 tcp_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 udp_port_src_;
  ::PROTOBUF_NAMESPACE_ID::int32 udp_port_dst_;
  ::PROTOBUF_NAMESPACE_ID::int32 udpmc_port_tx_;
  ::PROTOBUF_NAMESPACE_ID::int32 udpmc_port_rx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastruct_2eproto;
};
// -------------------------------------------------------------------

class Proto3DeviceAllCMD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3DeviceAllCMD) */ {
 public:
  inline Proto3DeviceAllCMD() : Proto3DeviceAllCMD(nullptr) {}
  virtual ~Proto3DeviceAllCMD();

  Proto3DeviceAllCMD(const Proto3DeviceAllCMD& from);
  Proto3DeviceAllCMD(Proto3DeviceAllCMD&& from) noexcept
    : Proto3DeviceAllCMD() {
    *this = ::std::move(from);
  }

  inline Proto3DeviceAllCMD& operator=(const Proto3DeviceAllCMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proto3DeviceAllCMD& operator=(Proto3DeviceAllCMD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proto3DeviceAllCMD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto3DeviceAllCMD* internal_default_instance() {
    return reinterpret_cast<const Proto3DeviceAllCMD*>(
               &_Proto3DeviceAllCMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Proto3DeviceAllCMD& a, Proto3DeviceAllCMD& b) {
    a.Swap(&b);
  }
  inline void Swap(Proto3DeviceAllCMD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proto3DeviceAllCMD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proto3DeviceAllCMD* New() const final {
    return CreateMaybeMessage<Proto3DeviceAllCMD>(nullptr);
  }

  Proto3DeviceAllCMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proto3DeviceAllCMD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proto3DeviceAllCMD& from);
  void MergeFrom(const Proto3DeviceAllCMD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto3DeviceAllCMD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3DeviceAllCMD";
  }
  protected:
  explicit Proto3DeviceAllCMD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastruct_2eproto);
    return ::descriptor_table_datastruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCMDsFieldNumber = 4,
    kDEVNAMEFieldNumber = 2,
    kPROTOCOLNAMEFieldNumber = 3,
    kIDFieldNumber = 1,
  };
  // repeated .Proto3DeviceCMDDefine CMDs = 4;
  int cmds_size() const;
  private:
  int _internal_cmds_size() const;
  public:
  void clear_cmds();
  ::Proto3DeviceCMDDefine* mutable_cmds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3DeviceCMDDefine >*
      mutable_cmds();
  private:
  const ::Proto3DeviceCMDDefine& _internal_cmds(int index) const;
  ::Proto3DeviceCMDDefine* _internal_add_cmds();
  public:
  const ::Proto3DeviceCMDDefine& cmds(int index) const;
  ::Proto3DeviceCMDDefine* add_cmds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3DeviceCMDDefine >&
      cmds() const;

  // string DEV_NAME = 2;
  void clear_dev_name();
  const std::string& dev_name() const;
  void set_dev_name(const std::string& value);
  void set_dev_name(std::string&& value);
  void set_dev_name(const char* value);
  void set_dev_name(const char* value, size_t size);
  std::string* mutable_dev_name();
  std::string* release_dev_name();
  void set_allocated_dev_name(std::string* dev_name);
  private:
  const std::string& _internal_dev_name() const;
  void _internal_set_dev_name(const std::string& value);
  std::string* _internal_mutable_dev_name();
  public:

  // string PROTOCOL_NAME = 3;
  void clear_protocol_name();
  const std::string& protocol_name() const;
  void set_protocol_name(const std::string& value);
  void set_protocol_name(std::string&& value);
  void set_protocol_name(const char* value);
  void set_protocol_name(const char* value, size_t size);
  std::string* mutable_protocol_name();
  std::string* release_protocol_name();
  void set_allocated_protocol_name(std::string* protocol_name);
  private:
  const std::string& _internal_protocol_name() const;
  void _internal_set_protocol_name(const std::string& value);
  std::string* _internal_mutable_protocol_name();
  public:

  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3DeviceAllCMD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3DeviceCMDDefine > cmds_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastruct_2eproto;
};
// -------------------------------------------------------------------

class Proto3DeviceCMDDefine PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3DeviceCMDDefine) */ {
 public:
  inline Proto3DeviceCMDDefine() : Proto3DeviceCMDDefine(nullptr) {}
  virtual ~Proto3DeviceCMDDefine();

  Proto3DeviceCMDDefine(const Proto3DeviceCMDDefine& from);
  Proto3DeviceCMDDefine(Proto3DeviceCMDDefine&& from) noexcept
    : Proto3DeviceCMDDefine() {
    *this = ::std::move(from);
  }

  inline Proto3DeviceCMDDefine& operator=(const Proto3DeviceCMDDefine& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proto3DeviceCMDDefine& operator=(Proto3DeviceCMDDefine&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proto3DeviceCMDDefine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto3DeviceCMDDefine* internal_default_instance() {
    return reinterpret_cast<const Proto3DeviceCMDDefine*>(
               &_Proto3DeviceCMDDefine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Proto3DeviceCMDDefine& a, Proto3DeviceCMDDefine& b) {
    a.Swap(&b);
  }
  inline void Swap(Proto3DeviceCMDDefine* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proto3DeviceCMDDefine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proto3DeviceCMDDefine* New() const final {
    return CreateMaybeMessage<Proto3DeviceCMDDefine>(nullptr);
  }

  Proto3DeviceCMDDefine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proto3DeviceCMDDefine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proto3DeviceCMDDefine& from);
  void MergeFrom(const Proto3DeviceCMDDefine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto3DeviceCMDDefine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3DeviceCMDDefine";
  }
  protected:
  explicit Proto3DeviceCMDDefine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastruct_2eproto);
    return ::descriptor_table_datastruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFelidsFieldNumber = 4,
    kCMDNAMEFieldNumber = 1,
    kENCODEFieldNumber = 2,
    kTimingCMDCyclePeriodFieldNumber = 3,
  };
  // repeated .Proto3CMDFieldCfg felids = 4;
  int felids_size() const;
  private:
  int _internal_felids_size() const;
  public:
  void clear_felids();
  ::Proto3CMDFieldCfg* mutable_felids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3CMDFieldCfg >*
      mutable_felids();
  private:
  const ::Proto3CMDFieldCfg& _internal_felids(int index) const;
  ::Proto3CMDFieldCfg* _internal_add_felids();
  public:
  const ::Proto3CMDFieldCfg& felids(int index) const;
  ::Proto3CMDFieldCfg* add_felids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3CMDFieldCfg >&
      felids() const;

  // string CMD_NAME = 1;
  void clear_cmd_name();
  const std::string& cmd_name() const;
  void set_cmd_name(const std::string& value);
  void set_cmd_name(std::string&& value);
  void set_cmd_name(const char* value);
  void set_cmd_name(const char* value, size_t size);
  std::string* mutable_cmd_name();
  std::string* release_cmd_name();
  void set_allocated_cmd_name(std::string* cmd_name);
  private:
  const std::string& _internal_cmd_name() const;
  void _internal_set_cmd_name(const std::string& value);
  std::string* _internal_mutable_cmd_name();
  public:

  // string ENCODE = 2;
  void clear_encode();
  const std::string& encode() const;
  void set_encode(const std::string& value);
  void set_encode(std::string&& value);
  void set_encode(const char* value);
  void set_encode(const char* value, size_t size);
  std::string* mutable_encode();
  std::string* release_encode();
  void set_allocated_encode(std::string* encode);
  private:
  const std::string& _internal_encode() const;
  void _internal_set_encode(const std::string& value);
  std::string* _internal_mutable_encode();
  public:

  // int32 Timing_CMD_Cycle_period = 3;
  void clear_timing_cmd_cycle_period();
  ::PROTOBUF_NAMESPACE_ID::int32 timing_cmd_cycle_period() const;
  void set_timing_cmd_cycle_period(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timing_cmd_cycle_period() const;
  void _internal_set_timing_cmd_cycle_period(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3DeviceCMDDefine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3CMDFieldCfg > felids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encode_;
  ::PROTOBUF_NAMESPACE_ID::int32 timing_cmd_cycle_period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastruct_2eproto;
};
// -------------------------------------------------------------------

class Proto3CMDFieldCfg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto3CMDFieldCfg) */ {
 public:
  inline Proto3CMDFieldCfg() : Proto3CMDFieldCfg(nullptr) {}
  virtual ~Proto3CMDFieldCfg();

  Proto3CMDFieldCfg(const Proto3CMDFieldCfg& from);
  Proto3CMDFieldCfg(Proto3CMDFieldCfg&& from) noexcept
    : Proto3CMDFieldCfg() {
    *this = ::std::move(from);
  }

  inline Proto3CMDFieldCfg& operator=(const Proto3CMDFieldCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proto3CMDFieldCfg& operator=(Proto3CMDFieldCfg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proto3CMDFieldCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proto3CMDFieldCfg* internal_default_instance() {
    return reinterpret_cast<const Proto3CMDFieldCfg*>(
               &_Proto3CMDFieldCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Proto3CMDFieldCfg& a, Proto3CMDFieldCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(Proto3CMDFieldCfg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proto3CMDFieldCfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proto3CMDFieldCfg* New() const final {
    return CreateMaybeMessage<Proto3CMDFieldCfg>(nullptr);
  }

  Proto3CMDFieldCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proto3CMDFieldCfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proto3CMDFieldCfg& from);
  void MergeFrom(const Proto3CMDFieldCfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proto3CMDFieldCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto3CMDFieldCfg";
  }
  protected:
  explicit Proto3CMDFieldCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastruct_2eproto);
    return ::descriptor_table_datastruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 3,
    kValueFieldNumber = 5,
    kMinValueFieldNumber = 6,
    kMaxValueFieldNumber = 7,
    kLuaScriptInFieldNumber = 15,
    kLuaScriptOutFieldNumber = 16,
    kIDFieldNumber = 1,
    kFieldIndexFieldNumber = 2,
    kFieldSizeFieldNumber = 4,
    kDataTypeFieldNumber = 8,
    kOperationInFieldNumber = 9,
    kOperationInNumFieldNumber = 10,
    kOperationOutFieldNumber = 11,
    kOperationOutNumFieldNumber = 12,
    kOperaBOInFieldNumber = 13,
    kOperaBOOutFieldNumber = 14,
  };
  // string fieldName = 3;
  void clear_fieldname();
  const std::string& fieldname() const;
  void set_fieldname(const std::string& value);
  void set_fieldname(std::string&& value);
  void set_fieldname(const char* value);
  void set_fieldname(const char* value, size_t size);
  std::string* mutable_fieldname();
  std::string* release_fieldname();
  void set_allocated_fieldname(std::string* fieldname);
  private:
  const std::string& _internal_fieldname() const;
  void _internal_set_fieldname(const std::string& value);
  std::string* _internal_mutable_fieldname();
  public:

  // string value = 5;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string minValue = 6;
  void clear_minvalue();
  const std::string& minvalue() const;
  void set_minvalue(const std::string& value);
  void set_minvalue(std::string&& value);
  void set_minvalue(const char* value);
  void set_minvalue(const char* value, size_t size);
  std::string* mutable_minvalue();
  std::string* release_minvalue();
  void set_allocated_minvalue(std::string* minvalue);
  private:
  const std::string& _internal_minvalue() const;
  void _internal_set_minvalue(const std::string& value);
  std::string* _internal_mutable_minvalue();
  public:

  // string maxValue = 7;
  void clear_maxvalue();
  const std::string& maxvalue() const;
  void set_maxvalue(const std::string& value);
  void set_maxvalue(std::string&& value);
  void set_maxvalue(const char* value);
  void set_maxvalue(const char* value, size_t size);
  std::string* mutable_maxvalue();
  std::string* release_maxvalue();
  void set_allocated_maxvalue(std::string* maxvalue);
  private:
  const std::string& _internal_maxvalue() const;
  void _internal_set_maxvalue(const std::string& value);
  std::string* _internal_mutable_maxvalue();
  public:

  // string Lua_Script_in = 15;
  void clear_lua_script_in();
  const std::string& lua_script_in() const;
  void set_lua_script_in(const std::string& value);
  void set_lua_script_in(std::string&& value);
  void set_lua_script_in(const char* value);
  void set_lua_script_in(const char* value, size_t size);
  std::string* mutable_lua_script_in();
  std::string* release_lua_script_in();
  void set_allocated_lua_script_in(std::string* lua_script_in);
  private:
  const std::string& _internal_lua_script_in() const;
  void _internal_set_lua_script_in(const std::string& value);
  std::string* _internal_mutable_lua_script_in();
  public:

  // string Lua_Script_out = 16;
  void clear_lua_script_out();
  const std::string& lua_script_out() const;
  void set_lua_script_out(const std::string& value);
  void set_lua_script_out(std::string&& value);
  void set_lua_script_out(const char* value);
  void set_lua_script_out(const char* value, size_t size);
  std::string* mutable_lua_script_out();
  std::string* release_lua_script_out();
  void set_allocated_lua_script_out(std::string* lua_script_out);
  private:
  const std::string& _internal_lua_script_out() const;
  void _internal_set_lua_script_out(const std::string& value);
  std::string* _internal_mutable_lua_script_out();
  public:

  // int32 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fieldIndex = 2;
  void clear_fieldindex();
  ::PROTOBUF_NAMESPACE_ID::int32 fieldindex() const;
  void set_fieldindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fieldindex() const;
  void _internal_set_fieldindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fieldSize = 4;
  void clear_fieldsize();
  ::PROTOBUF_NAMESPACE_ID::int32 fieldsize() const;
  void set_fieldsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fieldsize() const;
  void _internal_set_fieldsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dataType = 8;
  void clear_datatype();
  ::PROTOBUF_NAMESPACE_ID::int32 datatype() const;
  void set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datatype() const;
  void _internal_set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 operation_in = 9;
  void clear_operation_in();
  ::PROTOBUF_NAMESPACE_ID::int32 operation_in() const;
  void set_operation_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operation_in() const;
  void _internal_set_operation_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 operation_in_num = 10;
  void clear_operation_in_num();
  ::PROTOBUF_NAMESPACE_ID::int32 operation_in_num() const;
  void set_operation_in_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operation_in_num() const;
  void _internal_set_operation_in_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 operation_out = 11;
  void clear_operation_out();
  ::PROTOBUF_NAMESPACE_ID::int32 operation_out() const;
  void set_operation_out(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operation_out() const;
  void _internal_set_operation_out(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 operation_out_num = 12;
  void clear_operation_out_num();
  ::PROTOBUF_NAMESPACE_ID::int32 operation_out_num() const;
  void set_operation_out_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operation_out_num() const;
  void _internal_set_operation_out_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 operaBO_in = 13;
  void clear_operabo_in();
  ::PROTOBUF_NAMESPACE_ID::int32 operabo_in() const;
  void set_operabo_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operabo_in() const;
  void _internal_set_operabo_in(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 operaBO_out = 14;
  void clear_operabo_out();
  ::PROTOBUF_NAMESPACE_ID::int32 operabo_out() const;
  void set_operabo_out(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_operabo_out() const;
  void _internal_set_operabo_out(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Proto3CMDFieldCfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fieldname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr minvalue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maxvalue_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lua_script_in_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lua_script_out_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 fieldindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 fieldsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 datatype_;
  ::PROTOBUF_NAMESPACE_ID::int32 operation_in_;
  ::PROTOBUF_NAMESPACE_ID::int32 operation_in_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 operation_out_;
  ::PROTOBUF_NAMESPACE_ID::int32 operation_out_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 operabo_in_;
  ::PROTOBUF_NAMESPACE_ID::int32 operabo_out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastruct_2eproto;
};
// -------------------------------------------------------------------

class TDSDataPayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDSDataPayload) */ {
 public:
  inline TDSDataPayload() : TDSDataPayload(nullptr) {}
  virtual ~TDSDataPayload();

  TDSDataPayload(const TDSDataPayload& from);
  TDSDataPayload(TDSDataPayload&& from) noexcept
    : TDSDataPayload() {
    *this = ::std::move(from);
  }

  inline TDSDataPayload& operator=(const TDSDataPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDSDataPayload& operator=(TDSDataPayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TDSDataPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TDSDataPayload* internal_default_instance() {
    return reinterpret_cast<const TDSDataPayload*>(
               &_TDSDataPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TDSDataPayload& a, TDSDataPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(TDSDataPayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDSDataPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TDSDataPayload* New() const final {
    return CreateMaybeMessage<TDSDataPayload>(nullptr);
  }

  TDSDataPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TDSDataPayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TDSDataPayload& from);
  void MergeFrom(const TDSDataPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDSDataPayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDSDataPayload";
  }
  protected:
  explicit TDSDataPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastruct_2eproto);
    return ::descriptor_table_datastruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TDSDataPayload_Operation Operation;
  static constexpr Operation OPERATION_ADD =
    TDSDataPayload_Operation_OPERATION_ADD;
  static constexpr Operation OPERATION_DEL =
    TDSDataPayload_Operation_OPERATION_DEL;
  static constexpr Operation OPERATION_UPDATE =
    TDSDataPayload_Operation_OPERATION_UPDATE;
  static constexpr Operation OPERATION_QUERY =
    TDSDataPayload_Operation_OPERATION_QUERY;
  static inline bool Operation_IsValid(int value) {
    return TDSDataPayload_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    TDSDataPayload_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    TDSDataPayload_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    TDSDataPayload_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return TDSDataPayload_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return TDSDataPayload_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return TDSDataPayload_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kOperationFieldNumber = 1,
  };
  // repeated .google.protobuf.Any data = 3;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  PROTOBUF_NAMESPACE_ID::Any* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_data();
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_data(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_add_data();
  public:
  const PROTOBUF_NAMESPACE_ID::Any& data(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      data() const;

  // .TDSDataPayload.Operation operation = 1;
  void clear_operation();
  ::TDSDataPayload_Operation operation() const;
  void set_operation(::TDSDataPayload_Operation value);
  private:
  ::TDSDataPayload_Operation _internal_operation() const;
  void _internal_set_operation(::TDSDataPayload_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:TDSDataPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > data_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastruct_2eproto;
};
// -------------------------------------------------------------------

class TDSData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDSData) */ {
 public:
  inline TDSData() : TDSData(nullptr) {}
  virtual ~TDSData();

  TDSData(const TDSData& from);
  TDSData(TDSData&& from) noexcept
    : TDSData() {
    *this = ::std::move(from);
  }

  inline TDSData& operator=(const TDSData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDSData& operator=(TDSData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TDSData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TDSData* internal_default_instance() {
    return reinterpret_cast<const TDSData*>(
               &_TDSData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TDSData& a, TDSData& b) {
    a.Swap(&b);
  }
  inline void Swap(TDSData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDSData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TDSData* New() const final {
    return CreateMaybeMessage<TDSData>(nullptr);
  }

  TDSData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TDSData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TDSData& from);
  void MergeFrom(const TDSData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDSData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDSData";
  }
  protected:
  explicit TDSData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_datastruct_2eproto);
    return ::descriptor_table_datastruct_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TDSData_Flags Flags;
  static constexpr Flags NORMAL_DISPATCH =
    TDSData_Flags_NORMAL_DISPATCH;
  static constexpr Flags FULL_DISPATCH =
    TDSData_Flags_FULL_DISPATCH;
  static inline bool Flags_IsValid(int value) {
    return TDSData_Flags_IsValid(value);
  }
  static constexpr Flags Flags_MIN =
    TDSData_Flags_Flags_MIN;
  static constexpr Flags Flags_MAX =
    TDSData_Flags_Flags_MAX;
  static constexpr int Flags_ARRAYSIZE =
    TDSData_Flags_Flags_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Flags_descriptor() {
    return TDSData_Flags_descriptor();
  }
  template<typename T>
  static inline const std::string& Flags_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Flags>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Flags_Name.");
    return TDSData_Flags_Name(enum_t_value);
  }
  static inline bool Flags_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Flags* value) {
    return TDSData_Flags_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kTableFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // repeated .TDSDataPayload payload = 3;
  int payload_size() const;
  private:
  int _internal_payload_size() const;
  public:
  void clear_payload();
  ::TDSDataPayload* mutable_payload(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDSDataPayload >*
      mutable_payload();
  private:
  const ::TDSDataPayload& _internal_payload(int index) const;
  ::TDSDataPayload* _internal_add_payload();
  public:
  const ::TDSDataPayload& payload(int index) const;
  ::TDSDataPayload* add_payload();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDSDataPayload >&
      payload() const;

  // string table = 1;
  void clear_table();
  const std::string& table() const;
  void set_table(const std::string& value);
  void set_table(std::string&& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // .TDSData.Flags flags = 2;
  void clear_flags();
  ::TDSData_Flags flags() const;
  void set_flags(::TDSData_Flags value);
  private:
  ::TDSData_Flags _internal_flags() const;
  void _internal_set_flags(::TDSData_Flags value);
  public:

  // @@protoc_insertion_point(class_scope:TDSData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDSDataPayload > payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  int flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_datastruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Proto3ProtocolTypeCfg

// int32 protoId = 1;
inline void Proto3ProtocolTypeCfg::clear_protoid() {
  protoid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3ProtocolTypeCfg::_internal_protoid() const {
  return protoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3ProtocolTypeCfg::protoid() const {
  // @@protoc_insertion_point(field_get:Proto3ProtocolTypeCfg.protoId)
  return _internal_protoid();
}
inline void Proto3ProtocolTypeCfg::_internal_set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  protoid_ = value;
}
inline void Proto3ProtocolTypeCfg::set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protoid(value);
  // @@protoc_insertion_point(field_set:Proto3ProtocolTypeCfg.protoId)
}

// string protoName = 2;
inline void Proto3ProtocolTypeCfg::clear_protoname() {
  protoname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3ProtocolTypeCfg::protoname() const {
  // @@protoc_insertion_point(field_get:Proto3ProtocolTypeCfg.protoName)
  return _internal_protoname();
}
inline void Proto3ProtocolTypeCfg::set_protoname(const std::string& value) {
  _internal_set_protoname(value);
  // @@protoc_insertion_point(field_set:Proto3ProtocolTypeCfg.protoName)
}
inline std::string* Proto3ProtocolTypeCfg::mutable_protoname() {
  // @@protoc_insertion_point(field_mutable:Proto3ProtocolTypeCfg.protoName)
  return _internal_mutable_protoname();
}
inline const std::string& Proto3ProtocolTypeCfg::_internal_protoname() const {
  return protoname_.Get();
}
inline void Proto3ProtocolTypeCfg::_internal_set_protoname(const std::string& value) {
  
  protoname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3ProtocolTypeCfg::set_protoname(std::string&& value) {
  
  protoname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3ProtocolTypeCfg.protoName)
}
inline void Proto3ProtocolTypeCfg::set_protoname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protoname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3ProtocolTypeCfg.protoName)
}
inline void Proto3ProtocolTypeCfg::set_protoname(const char* value,
    size_t size) {
  
  protoname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3ProtocolTypeCfg.protoName)
}
inline std::string* Proto3ProtocolTypeCfg::_internal_mutable_protoname() {
  
  return protoname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3ProtocolTypeCfg::release_protoname() {
  // @@protoc_insertion_point(field_release:Proto3ProtocolTypeCfg.protoName)
  return protoname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3ProtocolTypeCfg::set_allocated_protoname(std::string* protoname) {
  if (protoname != nullptr) {
    
  } else {
    
  }
  protoname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protoname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3ProtocolTypeCfg.protoName)
}

// .Proto3ProtocolTypeCfg.protoFormat format = 3;
inline void Proto3ProtocolTypeCfg::clear_format() {
  format_ = 0;
}
inline ::Proto3ProtocolTypeCfg_protoFormat Proto3ProtocolTypeCfg::_internal_format() const {
  return static_cast< ::Proto3ProtocolTypeCfg_protoFormat >(format_);
}
inline ::Proto3ProtocolTypeCfg_protoFormat Proto3ProtocolTypeCfg::format() const {
  // @@protoc_insertion_point(field_get:Proto3ProtocolTypeCfg.format)
  return _internal_format();
}
inline void Proto3ProtocolTypeCfg::_internal_set_format(::Proto3ProtocolTypeCfg_protoFormat value) {
  
  format_ = value;
}
inline void Proto3ProtocolTypeCfg::set_format(::Proto3ProtocolTypeCfg_protoFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:Proto3ProtocolTypeCfg.format)
}

// -------------------------------------------------------------------

// Proto3ProtocolFieldCfg

// int32 protoId = 1;
inline void Proto3ProtocolFieldCfg::clear_protoid() {
  protoid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3ProtocolFieldCfg::_internal_protoid() const {
  return protoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3ProtocolFieldCfg::protoid() const {
  // @@protoc_insertion_point(field_get:Proto3ProtocolFieldCfg.protoId)
  return _internal_protoid();
}
inline void Proto3ProtocolFieldCfg::_internal_set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  protoid_ = value;
}
inline void Proto3ProtocolFieldCfg::set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protoid(value);
  // @@protoc_insertion_point(field_set:Proto3ProtocolFieldCfg.protoId)
}

// int32 fieldIndex = 2;
inline void Proto3ProtocolFieldCfg::clear_fieldindex() {
  fieldindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3ProtocolFieldCfg::_internal_fieldindex() const {
  return fieldindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3ProtocolFieldCfg::fieldindex() const {
  // @@protoc_insertion_point(field_get:Proto3ProtocolFieldCfg.fieldIndex)
  return _internal_fieldindex();
}
inline void Proto3ProtocolFieldCfg::_internal_set_fieldindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fieldindex_ = value;
}
inline void Proto3ProtocolFieldCfg::set_fieldindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fieldindex(value);
  // @@protoc_insertion_point(field_set:Proto3ProtocolFieldCfg.fieldIndex)
}

// string fieldName = 3;
inline void Proto3ProtocolFieldCfg::clear_fieldname() {
  fieldname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3ProtocolFieldCfg::fieldname() const {
  // @@protoc_insertion_point(field_get:Proto3ProtocolFieldCfg.fieldName)
  return _internal_fieldname();
}
inline void Proto3ProtocolFieldCfg::set_fieldname(const std::string& value) {
  _internal_set_fieldname(value);
  // @@protoc_insertion_point(field_set:Proto3ProtocolFieldCfg.fieldName)
}
inline std::string* Proto3ProtocolFieldCfg::mutable_fieldname() {
  // @@protoc_insertion_point(field_mutable:Proto3ProtocolFieldCfg.fieldName)
  return _internal_mutable_fieldname();
}
inline const std::string& Proto3ProtocolFieldCfg::_internal_fieldname() const {
  return fieldname_.Get();
}
inline void Proto3ProtocolFieldCfg::_internal_set_fieldname(const std::string& value) {
  
  fieldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3ProtocolFieldCfg::set_fieldname(std::string&& value) {
  
  fieldname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3ProtocolFieldCfg.fieldName)
}
inline void Proto3ProtocolFieldCfg::set_fieldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fieldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3ProtocolFieldCfg.fieldName)
}
inline void Proto3ProtocolFieldCfg::set_fieldname(const char* value,
    size_t size) {
  
  fieldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3ProtocolFieldCfg.fieldName)
}
inline std::string* Proto3ProtocolFieldCfg::_internal_mutable_fieldname() {
  
  return fieldname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3ProtocolFieldCfg::release_fieldname() {
  // @@protoc_insertion_point(field_release:Proto3ProtocolFieldCfg.fieldName)
  return fieldname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3ProtocolFieldCfg::set_allocated_fieldname(std::string* fieldname) {
  if (fieldname != nullptr) {
    
  } else {
    
  }
  fieldname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fieldname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3ProtocolFieldCfg.fieldName)
}

// int32 fieldSize = 4;
inline void Proto3ProtocolFieldCfg::clear_fieldsize() {
  fieldsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3ProtocolFieldCfg::_internal_fieldsize() const {
  return fieldsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3ProtocolFieldCfg::fieldsize() const {
  // @@protoc_insertion_point(field_get:Proto3ProtocolFieldCfg.fieldSize)
  return _internal_fieldsize();
}
inline void Proto3ProtocolFieldCfg::_internal_set_fieldsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fieldsize_ = value;
}
inline void Proto3ProtocolFieldCfg::set_fieldsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fieldsize(value);
  // @@protoc_insertion_point(field_set:Proto3ProtocolFieldCfg.fieldSize)
}

// string value = 5;
inline void Proto3ProtocolFieldCfg::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3ProtocolFieldCfg::value() const {
  // @@protoc_insertion_point(field_get:Proto3ProtocolFieldCfg.value)
  return _internal_value();
}
inline void Proto3ProtocolFieldCfg::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Proto3ProtocolFieldCfg.value)
}
inline std::string* Proto3ProtocolFieldCfg::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Proto3ProtocolFieldCfg.value)
  return _internal_mutable_value();
}
inline const std::string& Proto3ProtocolFieldCfg::_internal_value() const {
  return value_.Get();
}
inline void Proto3ProtocolFieldCfg::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3ProtocolFieldCfg::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3ProtocolFieldCfg.value)
}
inline void Proto3ProtocolFieldCfg::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3ProtocolFieldCfg.value)
}
inline void Proto3ProtocolFieldCfg::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3ProtocolFieldCfg.value)
}
inline std::string* Proto3ProtocolFieldCfg::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3ProtocolFieldCfg::release_value() {
  // @@protoc_insertion_point(field_release:Proto3ProtocolFieldCfg.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3ProtocolFieldCfg::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3ProtocolFieldCfg.value)
}

// string min = 6;
inline void Proto3ProtocolFieldCfg::clear_min() {
  min_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3ProtocolFieldCfg::min() const {
  // @@protoc_insertion_point(field_get:Proto3ProtocolFieldCfg.min)
  return _internal_min();
}
inline void Proto3ProtocolFieldCfg::set_min(const std::string& value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:Proto3ProtocolFieldCfg.min)
}
inline std::string* Proto3ProtocolFieldCfg::mutable_min() {
  // @@protoc_insertion_point(field_mutable:Proto3ProtocolFieldCfg.min)
  return _internal_mutable_min();
}
inline const std::string& Proto3ProtocolFieldCfg::_internal_min() const {
  return min_.Get();
}
inline void Proto3ProtocolFieldCfg::_internal_set_min(const std::string& value) {
  
  min_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3ProtocolFieldCfg::set_min(std::string&& value) {
  
  min_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3ProtocolFieldCfg.min)
}
inline void Proto3ProtocolFieldCfg::set_min(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  min_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3ProtocolFieldCfg.min)
}
inline void Proto3ProtocolFieldCfg::set_min(const char* value,
    size_t size) {
  
  min_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3ProtocolFieldCfg.min)
}
inline std::string* Proto3ProtocolFieldCfg::_internal_mutable_min() {
  
  return min_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3ProtocolFieldCfg::release_min() {
  // @@protoc_insertion_point(field_release:Proto3ProtocolFieldCfg.min)
  return min_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3ProtocolFieldCfg::set_allocated_min(std::string* min) {
  if (min != nullptr) {
    
  } else {
    
  }
  min_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3ProtocolFieldCfg.min)
}

// string max = 7;
inline void Proto3ProtocolFieldCfg::clear_max() {
  max_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3ProtocolFieldCfg::max() const {
  // @@protoc_insertion_point(field_get:Proto3ProtocolFieldCfg.max)
  return _internal_max();
}
inline void Proto3ProtocolFieldCfg::set_max(const std::string& value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:Proto3ProtocolFieldCfg.max)
}
inline std::string* Proto3ProtocolFieldCfg::mutable_max() {
  // @@protoc_insertion_point(field_mutable:Proto3ProtocolFieldCfg.max)
  return _internal_mutable_max();
}
inline const std::string& Proto3ProtocolFieldCfg::_internal_max() const {
  return max_.Get();
}
inline void Proto3ProtocolFieldCfg::_internal_set_max(const std::string& value) {
  
  max_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3ProtocolFieldCfg::set_max(std::string&& value) {
  
  max_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3ProtocolFieldCfg.max)
}
inline void Proto3ProtocolFieldCfg::set_max(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  max_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3ProtocolFieldCfg.max)
}
inline void Proto3ProtocolFieldCfg::set_max(const char* value,
    size_t size) {
  
  max_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3ProtocolFieldCfg.max)
}
inline std::string* Proto3ProtocolFieldCfg::_internal_mutable_max() {
  
  return max_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3ProtocolFieldCfg::release_max() {
  // @@protoc_insertion_point(field_release:Proto3ProtocolFieldCfg.max)
  return max_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3ProtocolFieldCfg::set_allocated_max(std::string* max) {
  if (max != nullptr) {
    
  } else {
    
  }
  max_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3ProtocolFieldCfg.max)
}

// int32 offset = 8;
inline void Proto3ProtocolFieldCfg::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3ProtocolFieldCfg::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3ProtocolFieldCfg::offset() const {
  // @@protoc_insertion_point(field_get:Proto3ProtocolFieldCfg.offset)
  return _internal_offset();
}
inline void Proto3ProtocolFieldCfg::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void Proto3ProtocolFieldCfg::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Proto3ProtocolFieldCfg.offset)
}

// .Proto3ProtocolFieldCfg.dataType type = 9;
inline void Proto3ProtocolFieldCfg::clear_type() {
  type_ = 0;
}
inline ::Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::_internal_type() const {
  return static_cast< ::Proto3ProtocolFieldCfg_dataType >(type_);
}
inline ::Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::type() const {
  // @@protoc_insertion_point(field_get:Proto3ProtocolFieldCfg.type)
  return _internal_type();
}
inline void Proto3ProtocolFieldCfg::_internal_set_type(::Proto3ProtocolFieldCfg_dataType value) {
  
  type_ = value;
}
inline void Proto3ProtocolFieldCfg::set_type(::Proto3ProtocolFieldCfg_dataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto3ProtocolFieldCfg.type)
}

// -------------------------------------------------------------------

// Proto3DeviceInfoCfg

// int32 ID = 1;
inline void Proto3DeviceInfoCfg::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceInfoCfg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceInfoCfg::id() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.ID)
  return _internal_id();
}
inline void Proto3DeviceInfoCfg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Proto3DeviceInfoCfg::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.ID)
}

// string DEV_NAME = 2;
inline void Proto3DeviceInfoCfg::clear_dev_name() {
  dev_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceInfoCfg::dev_name() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.DEV_NAME)
  return _internal_dev_name();
}
inline void Proto3DeviceInfoCfg::set_dev_name(const std::string& value) {
  _internal_set_dev_name(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.DEV_NAME)
}
inline std::string* Proto3DeviceInfoCfg::mutable_dev_name() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceInfoCfg.DEV_NAME)
  return _internal_mutable_dev_name();
}
inline const std::string& Proto3DeviceInfoCfg::_internal_dev_name() const {
  return dev_name_.Get();
}
inline void Proto3DeviceInfoCfg::_internal_set_dev_name(const std::string& value) {
  
  dev_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceInfoCfg::set_dev_name(std::string&& value) {
  
  dev_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceInfoCfg.DEV_NAME)
}
inline void Proto3DeviceInfoCfg::set_dev_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceInfoCfg.DEV_NAME)
}
inline void Proto3DeviceInfoCfg::set_dev_name(const char* value,
    size_t size) {
  
  dev_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceInfoCfg.DEV_NAME)
}
inline std::string* Proto3DeviceInfoCfg::_internal_mutable_dev_name() {
  
  return dev_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceInfoCfg::release_dev_name() {
  // @@protoc_insertion_point(field_release:Proto3DeviceInfoCfg.DEV_NAME)
  return dev_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceInfoCfg::set_allocated_dev_name(std::string* dev_name) {
  if (dev_name != nullptr) {
    
  } else {
    
  }
  dev_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceInfoCfg.DEV_NAME)
}

// string CMD_EXCEL_PATH = 3;
inline void Proto3DeviceInfoCfg::clear_cmd_excel_path() {
  cmd_excel_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceInfoCfg::cmd_excel_path() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.CMD_EXCEL_PATH)
  return _internal_cmd_excel_path();
}
inline void Proto3DeviceInfoCfg::set_cmd_excel_path(const std::string& value) {
  _internal_set_cmd_excel_path(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.CMD_EXCEL_PATH)
}
inline std::string* Proto3DeviceInfoCfg::mutable_cmd_excel_path() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceInfoCfg.CMD_EXCEL_PATH)
  return _internal_mutable_cmd_excel_path();
}
inline const std::string& Proto3DeviceInfoCfg::_internal_cmd_excel_path() const {
  return cmd_excel_path_.Get();
}
inline void Proto3DeviceInfoCfg::_internal_set_cmd_excel_path(const std::string& value) {
  
  cmd_excel_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceInfoCfg::set_cmd_excel_path(std::string&& value) {
  
  cmd_excel_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceInfoCfg.CMD_EXCEL_PATH)
}
inline void Proto3DeviceInfoCfg::set_cmd_excel_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_excel_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceInfoCfg.CMD_EXCEL_PATH)
}
inline void Proto3DeviceInfoCfg::set_cmd_excel_path(const char* value,
    size_t size) {
  
  cmd_excel_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceInfoCfg.CMD_EXCEL_PATH)
}
inline std::string* Proto3DeviceInfoCfg::_internal_mutable_cmd_excel_path() {
  
  return cmd_excel_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceInfoCfg::release_cmd_excel_path() {
  // @@protoc_insertion_point(field_release:Proto3DeviceInfoCfg.CMD_EXCEL_PATH)
  return cmd_excel_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceInfoCfg::set_allocated_cmd_excel_path(std::string* cmd_excel_path) {
  if (cmd_excel_path != nullptr) {
    
  } else {
    
  }
  cmd_excel_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd_excel_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceInfoCfg.CMD_EXCEL_PATH)
}

// string COMUNITATE_MODE = 4;
inline void Proto3DeviceInfoCfg::clear_comunitate_mode() {
  comunitate_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceInfoCfg::comunitate_mode() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.COMUNITATE_MODE)
  return _internal_comunitate_mode();
}
inline void Proto3DeviceInfoCfg::set_comunitate_mode(const std::string& value) {
  _internal_set_comunitate_mode(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.COMUNITATE_MODE)
}
inline std::string* Proto3DeviceInfoCfg::mutable_comunitate_mode() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceInfoCfg.COMUNITATE_MODE)
  return _internal_mutable_comunitate_mode();
}
inline const std::string& Proto3DeviceInfoCfg::_internal_comunitate_mode() const {
  return comunitate_mode_.Get();
}
inline void Proto3DeviceInfoCfg::_internal_set_comunitate_mode(const std::string& value) {
  
  comunitate_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceInfoCfg::set_comunitate_mode(std::string&& value) {
  
  comunitate_mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceInfoCfg.COMUNITATE_MODE)
}
inline void Proto3DeviceInfoCfg::set_comunitate_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comunitate_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceInfoCfg.COMUNITATE_MODE)
}
inline void Proto3DeviceInfoCfg::set_comunitate_mode(const char* value,
    size_t size) {
  
  comunitate_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceInfoCfg.COMUNITATE_MODE)
}
inline std::string* Proto3DeviceInfoCfg::_internal_mutable_comunitate_mode() {
  
  return comunitate_mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceInfoCfg::release_comunitate_mode() {
  // @@protoc_insertion_point(field_release:Proto3DeviceInfoCfg.COMUNITATE_MODE)
  return comunitate_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceInfoCfg::set_allocated_comunitate_mode(std::string* comunitate_mode) {
  if (comunitate_mode != nullptr) {
    
  } else {
    
  }
  comunitate_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comunitate_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceInfoCfg.COMUNITATE_MODE)
}

// string TCP_IP = 5;
inline void Proto3DeviceInfoCfg::clear_tcp_ip() {
  tcp_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceInfoCfg::tcp_ip() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.TCP_IP)
  return _internal_tcp_ip();
}
inline void Proto3DeviceInfoCfg::set_tcp_ip(const std::string& value) {
  _internal_set_tcp_ip(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.TCP_IP)
}
inline std::string* Proto3DeviceInfoCfg::mutable_tcp_ip() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceInfoCfg.TCP_IP)
  return _internal_mutable_tcp_ip();
}
inline const std::string& Proto3DeviceInfoCfg::_internal_tcp_ip() const {
  return tcp_ip_.Get();
}
inline void Proto3DeviceInfoCfg::_internal_set_tcp_ip(const std::string& value) {
  
  tcp_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceInfoCfg::set_tcp_ip(std::string&& value) {
  
  tcp_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceInfoCfg.TCP_IP)
}
inline void Proto3DeviceInfoCfg::set_tcp_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tcp_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceInfoCfg.TCP_IP)
}
inline void Proto3DeviceInfoCfg::set_tcp_ip(const char* value,
    size_t size) {
  
  tcp_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceInfoCfg.TCP_IP)
}
inline std::string* Proto3DeviceInfoCfg::_internal_mutable_tcp_ip() {
  
  return tcp_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceInfoCfg::release_tcp_ip() {
  // @@protoc_insertion_point(field_release:Proto3DeviceInfoCfg.TCP_IP)
  return tcp_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceInfoCfg::set_allocated_tcp_ip(std::string* tcp_ip) {
  if (tcp_ip != nullptr) {
    
  } else {
    
  }
  tcp_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tcp_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceInfoCfg.TCP_IP)
}

// int32 TCP_PORT = 6;
inline void Proto3DeviceInfoCfg::clear_tcp_port() {
  tcp_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceInfoCfg::_internal_tcp_port() const {
  return tcp_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceInfoCfg::tcp_port() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.TCP_PORT)
  return _internal_tcp_port();
}
inline void Proto3DeviceInfoCfg::_internal_set_tcp_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tcp_port_ = value;
}
inline void Proto3DeviceInfoCfg::set_tcp_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tcp_port(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.TCP_PORT)
}

// string UDP_IP_SRC = 7;
inline void Proto3DeviceInfoCfg::clear_udp_ip_src() {
  udp_ip_src_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceInfoCfg::udp_ip_src() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.UDP_IP_SRC)
  return _internal_udp_ip_src();
}
inline void Proto3DeviceInfoCfg::set_udp_ip_src(const std::string& value) {
  _internal_set_udp_ip_src(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.UDP_IP_SRC)
}
inline std::string* Proto3DeviceInfoCfg::mutable_udp_ip_src() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceInfoCfg.UDP_IP_SRC)
  return _internal_mutable_udp_ip_src();
}
inline const std::string& Proto3DeviceInfoCfg::_internal_udp_ip_src() const {
  return udp_ip_src_.Get();
}
inline void Proto3DeviceInfoCfg::_internal_set_udp_ip_src(const std::string& value) {
  
  udp_ip_src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceInfoCfg::set_udp_ip_src(std::string&& value) {
  
  udp_ip_src_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceInfoCfg.UDP_IP_SRC)
}
inline void Proto3DeviceInfoCfg::set_udp_ip_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  udp_ip_src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceInfoCfg.UDP_IP_SRC)
}
inline void Proto3DeviceInfoCfg::set_udp_ip_src(const char* value,
    size_t size) {
  
  udp_ip_src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceInfoCfg.UDP_IP_SRC)
}
inline std::string* Proto3DeviceInfoCfg::_internal_mutable_udp_ip_src() {
  
  return udp_ip_src_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceInfoCfg::release_udp_ip_src() {
  // @@protoc_insertion_point(field_release:Proto3DeviceInfoCfg.UDP_IP_SRC)
  return udp_ip_src_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceInfoCfg::set_allocated_udp_ip_src(std::string* udp_ip_src) {
  if (udp_ip_src != nullptr) {
    
  } else {
    
  }
  udp_ip_src_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), udp_ip_src,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceInfoCfg.UDP_IP_SRC)
}

// int32 UDP_PORT_SRC = 8;
inline void Proto3DeviceInfoCfg::clear_udp_port_src() {
  udp_port_src_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceInfoCfg::_internal_udp_port_src() const {
  return udp_port_src_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceInfoCfg::udp_port_src() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.UDP_PORT_SRC)
  return _internal_udp_port_src();
}
inline void Proto3DeviceInfoCfg::_internal_set_udp_port_src(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  udp_port_src_ = value;
}
inline void Proto3DeviceInfoCfg::set_udp_port_src(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_udp_port_src(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.UDP_PORT_SRC)
}

// string UDP_IP_DST = 9;
inline void Proto3DeviceInfoCfg::clear_udp_ip_dst() {
  udp_ip_dst_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceInfoCfg::udp_ip_dst() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.UDP_IP_DST)
  return _internal_udp_ip_dst();
}
inline void Proto3DeviceInfoCfg::set_udp_ip_dst(const std::string& value) {
  _internal_set_udp_ip_dst(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.UDP_IP_DST)
}
inline std::string* Proto3DeviceInfoCfg::mutable_udp_ip_dst() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceInfoCfg.UDP_IP_DST)
  return _internal_mutable_udp_ip_dst();
}
inline const std::string& Proto3DeviceInfoCfg::_internal_udp_ip_dst() const {
  return udp_ip_dst_.Get();
}
inline void Proto3DeviceInfoCfg::_internal_set_udp_ip_dst(const std::string& value) {
  
  udp_ip_dst_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceInfoCfg::set_udp_ip_dst(std::string&& value) {
  
  udp_ip_dst_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceInfoCfg.UDP_IP_DST)
}
inline void Proto3DeviceInfoCfg::set_udp_ip_dst(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  udp_ip_dst_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceInfoCfg.UDP_IP_DST)
}
inline void Proto3DeviceInfoCfg::set_udp_ip_dst(const char* value,
    size_t size) {
  
  udp_ip_dst_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceInfoCfg.UDP_IP_DST)
}
inline std::string* Proto3DeviceInfoCfg::_internal_mutable_udp_ip_dst() {
  
  return udp_ip_dst_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceInfoCfg::release_udp_ip_dst() {
  // @@protoc_insertion_point(field_release:Proto3DeviceInfoCfg.UDP_IP_DST)
  return udp_ip_dst_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceInfoCfg::set_allocated_udp_ip_dst(std::string* udp_ip_dst) {
  if (udp_ip_dst != nullptr) {
    
  } else {
    
  }
  udp_ip_dst_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), udp_ip_dst,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceInfoCfg.UDP_IP_DST)
}

// int32 UDP_PORT_DST = 10;
inline void Proto3DeviceInfoCfg::clear_udp_port_dst() {
  udp_port_dst_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceInfoCfg::_internal_udp_port_dst() const {
  return udp_port_dst_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceInfoCfg::udp_port_dst() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.UDP_PORT_DST)
  return _internal_udp_port_dst();
}
inline void Proto3DeviceInfoCfg::_internal_set_udp_port_dst(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  udp_port_dst_ = value;
}
inline void Proto3DeviceInfoCfg::set_udp_port_dst(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_udp_port_dst(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.UDP_PORT_DST)
}

// string UDPMC_IP = 11;
inline void Proto3DeviceInfoCfg::clear_udpmc_ip() {
  udpmc_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceInfoCfg::udpmc_ip() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.UDPMC_IP)
  return _internal_udpmc_ip();
}
inline void Proto3DeviceInfoCfg::set_udpmc_ip(const std::string& value) {
  _internal_set_udpmc_ip(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.UDPMC_IP)
}
inline std::string* Proto3DeviceInfoCfg::mutable_udpmc_ip() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceInfoCfg.UDPMC_IP)
  return _internal_mutable_udpmc_ip();
}
inline const std::string& Proto3DeviceInfoCfg::_internal_udpmc_ip() const {
  return udpmc_ip_.Get();
}
inline void Proto3DeviceInfoCfg::_internal_set_udpmc_ip(const std::string& value) {
  
  udpmc_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceInfoCfg::set_udpmc_ip(std::string&& value) {
  
  udpmc_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceInfoCfg.UDPMC_IP)
}
inline void Proto3DeviceInfoCfg::set_udpmc_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  udpmc_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceInfoCfg.UDPMC_IP)
}
inline void Proto3DeviceInfoCfg::set_udpmc_ip(const char* value,
    size_t size) {
  
  udpmc_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceInfoCfg.UDPMC_IP)
}
inline std::string* Proto3DeviceInfoCfg::_internal_mutable_udpmc_ip() {
  
  return udpmc_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceInfoCfg::release_udpmc_ip() {
  // @@protoc_insertion_point(field_release:Proto3DeviceInfoCfg.UDPMC_IP)
  return udpmc_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceInfoCfg::set_allocated_udpmc_ip(std::string* udpmc_ip) {
  if (udpmc_ip != nullptr) {
    
  } else {
    
  }
  udpmc_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), udpmc_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceInfoCfg.UDPMC_IP)
}

// string UDPMC_IP_TX = 12;
inline void Proto3DeviceInfoCfg::clear_udpmc_ip_tx() {
  udpmc_ip_tx_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceInfoCfg::udpmc_ip_tx() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.UDPMC_IP_TX)
  return _internal_udpmc_ip_tx();
}
inline void Proto3DeviceInfoCfg::set_udpmc_ip_tx(const std::string& value) {
  _internal_set_udpmc_ip_tx(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.UDPMC_IP_TX)
}
inline std::string* Proto3DeviceInfoCfg::mutable_udpmc_ip_tx() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceInfoCfg.UDPMC_IP_TX)
  return _internal_mutable_udpmc_ip_tx();
}
inline const std::string& Proto3DeviceInfoCfg::_internal_udpmc_ip_tx() const {
  return udpmc_ip_tx_.Get();
}
inline void Proto3DeviceInfoCfg::_internal_set_udpmc_ip_tx(const std::string& value) {
  
  udpmc_ip_tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceInfoCfg::set_udpmc_ip_tx(std::string&& value) {
  
  udpmc_ip_tx_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceInfoCfg.UDPMC_IP_TX)
}
inline void Proto3DeviceInfoCfg::set_udpmc_ip_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  udpmc_ip_tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceInfoCfg.UDPMC_IP_TX)
}
inline void Proto3DeviceInfoCfg::set_udpmc_ip_tx(const char* value,
    size_t size) {
  
  udpmc_ip_tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceInfoCfg.UDPMC_IP_TX)
}
inline std::string* Proto3DeviceInfoCfg::_internal_mutable_udpmc_ip_tx() {
  
  return udpmc_ip_tx_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceInfoCfg::release_udpmc_ip_tx() {
  // @@protoc_insertion_point(field_release:Proto3DeviceInfoCfg.UDPMC_IP_TX)
  return udpmc_ip_tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceInfoCfg::set_allocated_udpmc_ip_tx(std::string* udpmc_ip_tx) {
  if (udpmc_ip_tx != nullptr) {
    
  } else {
    
  }
  udpmc_ip_tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), udpmc_ip_tx,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceInfoCfg.UDPMC_IP_TX)
}

// int32 UDPMC_PORT_TX = 13;
inline void Proto3DeviceInfoCfg::clear_udpmc_port_tx() {
  udpmc_port_tx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceInfoCfg::_internal_udpmc_port_tx() const {
  return udpmc_port_tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceInfoCfg::udpmc_port_tx() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.UDPMC_PORT_TX)
  return _internal_udpmc_port_tx();
}
inline void Proto3DeviceInfoCfg::_internal_set_udpmc_port_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  udpmc_port_tx_ = value;
}
inline void Proto3DeviceInfoCfg::set_udpmc_port_tx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_udpmc_port_tx(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.UDPMC_PORT_TX)
}

// string UDPMC_IP_RX = 14;
inline void Proto3DeviceInfoCfg::clear_udpmc_ip_rx() {
  udpmc_ip_rx_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceInfoCfg::udpmc_ip_rx() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.UDPMC_IP_RX)
  return _internal_udpmc_ip_rx();
}
inline void Proto3DeviceInfoCfg::set_udpmc_ip_rx(const std::string& value) {
  _internal_set_udpmc_ip_rx(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.UDPMC_IP_RX)
}
inline std::string* Proto3DeviceInfoCfg::mutable_udpmc_ip_rx() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceInfoCfg.UDPMC_IP_RX)
  return _internal_mutable_udpmc_ip_rx();
}
inline const std::string& Proto3DeviceInfoCfg::_internal_udpmc_ip_rx() const {
  return udpmc_ip_rx_.Get();
}
inline void Proto3DeviceInfoCfg::_internal_set_udpmc_ip_rx(const std::string& value) {
  
  udpmc_ip_rx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceInfoCfg::set_udpmc_ip_rx(std::string&& value) {
  
  udpmc_ip_rx_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceInfoCfg.UDPMC_IP_RX)
}
inline void Proto3DeviceInfoCfg::set_udpmc_ip_rx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  udpmc_ip_rx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceInfoCfg.UDPMC_IP_RX)
}
inline void Proto3DeviceInfoCfg::set_udpmc_ip_rx(const char* value,
    size_t size) {
  
  udpmc_ip_rx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceInfoCfg.UDPMC_IP_RX)
}
inline std::string* Proto3DeviceInfoCfg::_internal_mutable_udpmc_ip_rx() {
  
  return udpmc_ip_rx_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceInfoCfg::release_udpmc_ip_rx() {
  // @@protoc_insertion_point(field_release:Proto3DeviceInfoCfg.UDPMC_IP_RX)
  return udpmc_ip_rx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceInfoCfg::set_allocated_udpmc_ip_rx(std::string* udpmc_ip_rx) {
  if (udpmc_ip_rx != nullptr) {
    
  } else {
    
  }
  udpmc_ip_rx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), udpmc_ip_rx,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceInfoCfg.UDPMC_IP_RX)
}

// int32 UDPMC_PORT_RX = 15;
inline void Proto3DeviceInfoCfg::clear_udpmc_port_rx() {
  udpmc_port_rx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceInfoCfg::_internal_udpmc_port_rx() const {
  return udpmc_port_rx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceInfoCfg::udpmc_port_rx() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceInfoCfg.UDPMC_PORT_RX)
  return _internal_udpmc_port_rx();
}
inline void Proto3DeviceInfoCfg::_internal_set_udpmc_port_rx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  udpmc_port_rx_ = value;
}
inline void Proto3DeviceInfoCfg::set_udpmc_port_rx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_udpmc_port_rx(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceInfoCfg.UDPMC_PORT_RX)
}

// -------------------------------------------------------------------

// Proto3DeviceAllCMD

// int32 ID = 1;
inline void Proto3DeviceAllCMD::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceAllCMD::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceAllCMD::id() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceAllCMD.ID)
  return _internal_id();
}
inline void Proto3DeviceAllCMD::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Proto3DeviceAllCMD::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceAllCMD.ID)
}

// string DEV_NAME = 2;
inline void Proto3DeviceAllCMD::clear_dev_name() {
  dev_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceAllCMD::dev_name() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceAllCMD.DEV_NAME)
  return _internal_dev_name();
}
inline void Proto3DeviceAllCMD::set_dev_name(const std::string& value) {
  _internal_set_dev_name(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceAllCMD.DEV_NAME)
}
inline std::string* Proto3DeviceAllCMD::mutable_dev_name() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceAllCMD.DEV_NAME)
  return _internal_mutable_dev_name();
}
inline const std::string& Proto3DeviceAllCMD::_internal_dev_name() const {
  return dev_name_.Get();
}
inline void Proto3DeviceAllCMD::_internal_set_dev_name(const std::string& value) {
  
  dev_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceAllCMD::set_dev_name(std::string&& value) {
  
  dev_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceAllCMD.DEV_NAME)
}
inline void Proto3DeviceAllCMD::set_dev_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceAllCMD.DEV_NAME)
}
inline void Proto3DeviceAllCMD::set_dev_name(const char* value,
    size_t size) {
  
  dev_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceAllCMD.DEV_NAME)
}
inline std::string* Proto3DeviceAllCMD::_internal_mutable_dev_name() {
  
  return dev_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceAllCMD::release_dev_name() {
  // @@protoc_insertion_point(field_release:Proto3DeviceAllCMD.DEV_NAME)
  return dev_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceAllCMD::set_allocated_dev_name(std::string* dev_name) {
  if (dev_name != nullptr) {
    
  } else {
    
  }
  dev_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceAllCMD.DEV_NAME)
}

// string PROTOCOL_NAME = 3;
inline void Proto3DeviceAllCMD::clear_protocol_name() {
  protocol_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceAllCMD::protocol_name() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceAllCMD.PROTOCOL_NAME)
  return _internal_protocol_name();
}
inline void Proto3DeviceAllCMD::set_protocol_name(const std::string& value) {
  _internal_set_protocol_name(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceAllCMD.PROTOCOL_NAME)
}
inline std::string* Proto3DeviceAllCMD::mutable_protocol_name() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceAllCMD.PROTOCOL_NAME)
  return _internal_mutable_protocol_name();
}
inline const std::string& Proto3DeviceAllCMD::_internal_protocol_name() const {
  return protocol_name_.Get();
}
inline void Proto3DeviceAllCMD::_internal_set_protocol_name(const std::string& value) {
  
  protocol_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceAllCMD::set_protocol_name(std::string&& value) {
  
  protocol_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceAllCMD.PROTOCOL_NAME)
}
inline void Proto3DeviceAllCMD::set_protocol_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceAllCMD.PROTOCOL_NAME)
}
inline void Proto3DeviceAllCMD::set_protocol_name(const char* value,
    size_t size) {
  
  protocol_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceAllCMD.PROTOCOL_NAME)
}
inline std::string* Proto3DeviceAllCMD::_internal_mutable_protocol_name() {
  
  return protocol_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceAllCMD::release_protocol_name() {
  // @@protoc_insertion_point(field_release:Proto3DeviceAllCMD.PROTOCOL_NAME)
  return protocol_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceAllCMD::set_allocated_protocol_name(std::string* protocol_name) {
  if (protocol_name != nullptr) {
    
  } else {
    
  }
  protocol_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceAllCMD.PROTOCOL_NAME)
}

// repeated .Proto3DeviceCMDDefine CMDs = 4;
inline int Proto3DeviceAllCMD::_internal_cmds_size() const {
  return cmds_.size();
}
inline int Proto3DeviceAllCMD::cmds_size() const {
  return _internal_cmds_size();
}
inline void Proto3DeviceAllCMD::clear_cmds() {
  cmds_.Clear();
}
inline ::Proto3DeviceCMDDefine* Proto3DeviceAllCMD::mutable_cmds(int index) {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceAllCMD.CMDs)
  return cmds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3DeviceCMDDefine >*
Proto3DeviceAllCMD::mutable_cmds() {
  // @@protoc_insertion_point(field_mutable_list:Proto3DeviceAllCMD.CMDs)
  return &cmds_;
}
inline const ::Proto3DeviceCMDDefine& Proto3DeviceAllCMD::_internal_cmds(int index) const {
  return cmds_.Get(index);
}
inline const ::Proto3DeviceCMDDefine& Proto3DeviceAllCMD::cmds(int index) const {
  // @@protoc_insertion_point(field_get:Proto3DeviceAllCMD.CMDs)
  return _internal_cmds(index);
}
inline ::Proto3DeviceCMDDefine* Proto3DeviceAllCMD::_internal_add_cmds() {
  return cmds_.Add();
}
inline ::Proto3DeviceCMDDefine* Proto3DeviceAllCMD::add_cmds() {
  // @@protoc_insertion_point(field_add:Proto3DeviceAllCMD.CMDs)
  return _internal_add_cmds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3DeviceCMDDefine >&
Proto3DeviceAllCMD::cmds() const {
  // @@protoc_insertion_point(field_list:Proto3DeviceAllCMD.CMDs)
  return cmds_;
}

// -------------------------------------------------------------------

// Proto3DeviceCMDDefine

// string CMD_NAME = 1;
inline void Proto3DeviceCMDDefine::clear_cmd_name() {
  cmd_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceCMDDefine::cmd_name() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceCMDDefine.CMD_NAME)
  return _internal_cmd_name();
}
inline void Proto3DeviceCMDDefine::set_cmd_name(const std::string& value) {
  _internal_set_cmd_name(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceCMDDefine.CMD_NAME)
}
inline std::string* Proto3DeviceCMDDefine::mutable_cmd_name() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceCMDDefine.CMD_NAME)
  return _internal_mutable_cmd_name();
}
inline const std::string& Proto3DeviceCMDDefine::_internal_cmd_name() const {
  return cmd_name_.Get();
}
inline void Proto3DeviceCMDDefine::_internal_set_cmd_name(const std::string& value) {
  
  cmd_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceCMDDefine::set_cmd_name(std::string&& value) {
  
  cmd_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceCMDDefine.CMD_NAME)
}
inline void Proto3DeviceCMDDefine::set_cmd_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cmd_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceCMDDefine.CMD_NAME)
}
inline void Proto3DeviceCMDDefine::set_cmd_name(const char* value,
    size_t size) {
  
  cmd_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceCMDDefine.CMD_NAME)
}
inline std::string* Proto3DeviceCMDDefine::_internal_mutable_cmd_name() {
  
  return cmd_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceCMDDefine::release_cmd_name() {
  // @@protoc_insertion_point(field_release:Proto3DeviceCMDDefine.CMD_NAME)
  return cmd_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceCMDDefine::set_allocated_cmd_name(std::string* cmd_name) {
  if (cmd_name != nullptr) {
    
  } else {
    
  }
  cmd_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceCMDDefine.CMD_NAME)
}

// string ENCODE = 2;
inline void Proto3DeviceCMDDefine::clear_encode() {
  encode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3DeviceCMDDefine::encode() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceCMDDefine.ENCODE)
  return _internal_encode();
}
inline void Proto3DeviceCMDDefine::set_encode(const std::string& value) {
  _internal_set_encode(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceCMDDefine.ENCODE)
}
inline std::string* Proto3DeviceCMDDefine::mutable_encode() {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceCMDDefine.ENCODE)
  return _internal_mutable_encode();
}
inline const std::string& Proto3DeviceCMDDefine::_internal_encode() const {
  return encode_.Get();
}
inline void Proto3DeviceCMDDefine::_internal_set_encode(const std::string& value) {
  
  encode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3DeviceCMDDefine::set_encode(std::string&& value) {
  
  encode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3DeviceCMDDefine.ENCODE)
}
inline void Proto3DeviceCMDDefine::set_encode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3DeviceCMDDefine.ENCODE)
}
inline void Proto3DeviceCMDDefine::set_encode(const char* value,
    size_t size) {
  
  encode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3DeviceCMDDefine.ENCODE)
}
inline std::string* Proto3DeviceCMDDefine::_internal_mutable_encode() {
  
  return encode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3DeviceCMDDefine::release_encode() {
  // @@protoc_insertion_point(field_release:Proto3DeviceCMDDefine.ENCODE)
  return encode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3DeviceCMDDefine::set_allocated_encode(std::string* encode) {
  if (encode != nullptr) {
    
  } else {
    
  }
  encode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3DeviceCMDDefine.ENCODE)
}

// int32 Timing_CMD_Cycle_period = 3;
inline void Proto3DeviceCMDDefine::clear_timing_cmd_cycle_period() {
  timing_cmd_cycle_period_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceCMDDefine::_internal_timing_cmd_cycle_period() const {
  return timing_cmd_cycle_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3DeviceCMDDefine::timing_cmd_cycle_period() const {
  // @@protoc_insertion_point(field_get:Proto3DeviceCMDDefine.Timing_CMD_Cycle_period)
  return _internal_timing_cmd_cycle_period();
}
inline void Proto3DeviceCMDDefine::_internal_set_timing_cmd_cycle_period(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timing_cmd_cycle_period_ = value;
}
inline void Proto3DeviceCMDDefine::set_timing_cmd_cycle_period(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timing_cmd_cycle_period(value);
  // @@protoc_insertion_point(field_set:Proto3DeviceCMDDefine.Timing_CMD_Cycle_period)
}

// repeated .Proto3CMDFieldCfg felids = 4;
inline int Proto3DeviceCMDDefine::_internal_felids_size() const {
  return felids_.size();
}
inline int Proto3DeviceCMDDefine::felids_size() const {
  return _internal_felids_size();
}
inline void Proto3DeviceCMDDefine::clear_felids() {
  felids_.Clear();
}
inline ::Proto3CMDFieldCfg* Proto3DeviceCMDDefine::mutable_felids(int index) {
  // @@protoc_insertion_point(field_mutable:Proto3DeviceCMDDefine.felids)
  return felids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3CMDFieldCfg >*
Proto3DeviceCMDDefine::mutable_felids() {
  // @@protoc_insertion_point(field_mutable_list:Proto3DeviceCMDDefine.felids)
  return &felids_;
}
inline const ::Proto3CMDFieldCfg& Proto3DeviceCMDDefine::_internal_felids(int index) const {
  return felids_.Get(index);
}
inline const ::Proto3CMDFieldCfg& Proto3DeviceCMDDefine::felids(int index) const {
  // @@protoc_insertion_point(field_get:Proto3DeviceCMDDefine.felids)
  return _internal_felids(index);
}
inline ::Proto3CMDFieldCfg* Proto3DeviceCMDDefine::_internal_add_felids() {
  return felids_.Add();
}
inline ::Proto3CMDFieldCfg* Proto3DeviceCMDDefine::add_felids() {
  // @@protoc_insertion_point(field_add:Proto3DeviceCMDDefine.felids)
  return _internal_add_felids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto3CMDFieldCfg >&
Proto3DeviceCMDDefine::felids() const {
  // @@protoc_insertion_point(field_list:Proto3DeviceCMDDefine.felids)
  return felids_;
}

// -------------------------------------------------------------------

// Proto3CMDFieldCfg

// int32 ID = 1;
inline void Proto3CMDFieldCfg::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::id() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.ID)
  return _internal_id();
}
inline void Proto3CMDFieldCfg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Proto3CMDFieldCfg::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.ID)
}

// int32 fieldIndex = 2;
inline void Proto3CMDFieldCfg::clear_fieldindex() {
  fieldindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::_internal_fieldindex() const {
  return fieldindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::fieldindex() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.fieldIndex)
  return _internal_fieldindex();
}
inline void Proto3CMDFieldCfg::_internal_set_fieldindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fieldindex_ = value;
}
inline void Proto3CMDFieldCfg::set_fieldindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fieldindex(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.fieldIndex)
}

// string fieldName = 3;
inline void Proto3CMDFieldCfg::clear_fieldname() {
  fieldname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3CMDFieldCfg::fieldname() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.fieldName)
  return _internal_fieldname();
}
inline void Proto3CMDFieldCfg::set_fieldname(const std::string& value) {
  _internal_set_fieldname(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.fieldName)
}
inline std::string* Proto3CMDFieldCfg::mutable_fieldname() {
  // @@protoc_insertion_point(field_mutable:Proto3CMDFieldCfg.fieldName)
  return _internal_mutable_fieldname();
}
inline const std::string& Proto3CMDFieldCfg::_internal_fieldname() const {
  return fieldname_.Get();
}
inline void Proto3CMDFieldCfg::_internal_set_fieldname(const std::string& value) {
  
  fieldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3CMDFieldCfg::set_fieldname(std::string&& value) {
  
  fieldname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3CMDFieldCfg.fieldName)
}
inline void Proto3CMDFieldCfg::set_fieldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fieldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3CMDFieldCfg.fieldName)
}
inline void Proto3CMDFieldCfg::set_fieldname(const char* value,
    size_t size) {
  
  fieldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3CMDFieldCfg.fieldName)
}
inline std::string* Proto3CMDFieldCfg::_internal_mutable_fieldname() {
  
  return fieldname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3CMDFieldCfg::release_fieldname() {
  // @@protoc_insertion_point(field_release:Proto3CMDFieldCfg.fieldName)
  return fieldname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3CMDFieldCfg::set_allocated_fieldname(std::string* fieldname) {
  if (fieldname != nullptr) {
    
  } else {
    
  }
  fieldname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fieldname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3CMDFieldCfg.fieldName)
}

// int32 fieldSize = 4;
inline void Proto3CMDFieldCfg::clear_fieldsize() {
  fieldsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::_internal_fieldsize() const {
  return fieldsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::fieldsize() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.fieldSize)
  return _internal_fieldsize();
}
inline void Proto3CMDFieldCfg::_internal_set_fieldsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fieldsize_ = value;
}
inline void Proto3CMDFieldCfg::set_fieldsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fieldsize(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.fieldSize)
}

// string value = 5;
inline void Proto3CMDFieldCfg::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3CMDFieldCfg::value() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.value)
  return _internal_value();
}
inline void Proto3CMDFieldCfg::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.value)
}
inline std::string* Proto3CMDFieldCfg::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Proto3CMDFieldCfg.value)
  return _internal_mutable_value();
}
inline const std::string& Proto3CMDFieldCfg::_internal_value() const {
  return value_.Get();
}
inline void Proto3CMDFieldCfg::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3CMDFieldCfg::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3CMDFieldCfg.value)
}
inline void Proto3CMDFieldCfg::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3CMDFieldCfg.value)
}
inline void Proto3CMDFieldCfg::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3CMDFieldCfg.value)
}
inline std::string* Proto3CMDFieldCfg::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3CMDFieldCfg::release_value() {
  // @@protoc_insertion_point(field_release:Proto3CMDFieldCfg.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3CMDFieldCfg::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3CMDFieldCfg.value)
}

// string minValue = 6;
inline void Proto3CMDFieldCfg::clear_minvalue() {
  minvalue_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3CMDFieldCfg::minvalue() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.minValue)
  return _internal_minvalue();
}
inline void Proto3CMDFieldCfg::set_minvalue(const std::string& value) {
  _internal_set_minvalue(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.minValue)
}
inline std::string* Proto3CMDFieldCfg::mutable_minvalue() {
  // @@protoc_insertion_point(field_mutable:Proto3CMDFieldCfg.minValue)
  return _internal_mutable_minvalue();
}
inline const std::string& Proto3CMDFieldCfg::_internal_minvalue() const {
  return minvalue_.Get();
}
inline void Proto3CMDFieldCfg::_internal_set_minvalue(const std::string& value) {
  
  minvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3CMDFieldCfg::set_minvalue(std::string&& value) {
  
  minvalue_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3CMDFieldCfg.minValue)
}
inline void Proto3CMDFieldCfg::set_minvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  minvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3CMDFieldCfg.minValue)
}
inline void Proto3CMDFieldCfg::set_minvalue(const char* value,
    size_t size) {
  
  minvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3CMDFieldCfg.minValue)
}
inline std::string* Proto3CMDFieldCfg::_internal_mutable_minvalue() {
  
  return minvalue_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3CMDFieldCfg::release_minvalue() {
  // @@protoc_insertion_point(field_release:Proto3CMDFieldCfg.minValue)
  return minvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3CMDFieldCfg::set_allocated_minvalue(std::string* minvalue) {
  if (minvalue != nullptr) {
    
  } else {
    
  }
  minvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), minvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3CMDFieldCfg.minValue)
}

// string maxValue = 7;
inline void Proto3CMDFieldCfg::clear_maxvalue() {
  maxvalue_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3CMDFieldCfg::maxvalue() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.maxValue)
  return _internal_maxvalue();
}
inline void Proto3CMDFieldCfg::set_maxvalue(const std::string& value) {
  _internal_set_maxvalue(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.maxValue)
}
inline std::string* Proto3CMDFieldCfg::mutable_maxvalue() {
  // @@protoc_insertion_point(field_mutable:Proto3CMDFieldCfg.maxValue)
  return _internal_mutable_maxvalue();
}
inline const std::string& Proto3CMDFieldCfg::_internal_maxvalue() const {
  return maxvalue_.Get();
}
inline void Proto3CMDFieldCfg::_internal_set_maxvalue(const std::string& value) {
  
  maxvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3CMDFieldCfg::set_maxvalue(std::string&& value) {
  
  maxvalue_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3CMDFieldCfg.maxValue)
}
inline void Proto3CMDFieldCfg::set_maxvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maxvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3CMDFieldCfg.maxValue)
}
inline void Proto3CMDFieldCfg::set_maxvalue(const char* value,
    size_t size) {
  
  maxvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3CMDFieldCfg.maxValue)
}
inline std::string* Proto3CMDFieldCfg::_internal_mutable_maxvalue() {
  
  return maxvalue_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3CMDFieldCfg::release_maxvalue() {
  // @@protoc_insertion_point(field_release:Proto3CMDFieldCfg.maxValue)
  return maxvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3CMDFieldCfg::set_allocated_maxvalue(std::string* maxvalue) {
  if (maxvalue != nullptr) {
    
  } else {
    
  }
  maxvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maxvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3CMDFieldCfg.maxValue)
}

// int32 dataType = 8;
inline void Proto3CMDFieldCfg::clear_datatype() {
  datatype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::_internal_datatype() const {
  return datatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::datatype() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.dataType)
  return _internal_datatype();
}
inline void Proto3CMDFieldCfg::_internal_set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datatype_ = value;
}
inline void Proto3CMDFieldCfg::set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.dataType)
}

// int32 operation_in = 9;
inline void Proto3CMDFieldCfg::clear_operation_in() {
  operation_in_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::_internal_operation_in() const {
  return operation_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::operation_in() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.operation_in)
  return _internal_operation_in();
}
inline void Proto3CMDFieldCfg::_internal_set_operation_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operation_in_ = value;
}
inline void Proto3CMDFieldCfg::set_operation_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operation_in(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.operation_in)
}

// int32 operation_in_num = 10;
inline void Proto3CMDFieldCfg::clear_operation_in_num() {
  operation_in_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::_internal_operation_in_num() const {
  return operation_in_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::operation_in_num() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.operation_in_num)
  return _internal_operation_in_num();
}
inline void Proto3CMDFieldCfg::_internal_set_operation_in_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operation_in_num_ = value;
}
inline void Proto3CMDFieldCfg::set_operation_in_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operation_in_num(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.operation_in_num)
}

// int32 operation_out = 11;
inline void Proto3CMDFieldCfg::clear_operation_out() {
  operation_out_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::_internal_operation_out() const {
  return operation_out_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::operation_out() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.operation_out)
  return _internal_operation_out();
}
inline void Proto3CMDFieldCfg::_internal_set_operation_out(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operation_out_ = value;
}
inline void Proto3CMDFieldCfg::set_operation_out(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operation_out(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.operation_out)
}

// int32 operation_out_num = 12;
inline void Proto3CMDFieldCfg::clear_operation_out_num() {
  operation_out_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::_internal_operation_out_num() const {
  return operation_out_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::operation_out_num() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.operation_out_num)
  return _internal_operation_out_num();
}
inline void Proto3CMDFieldCfg::_internal_set_operation_out_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operation_out_num_ = value;
}
inline void Proto3CMDFieldCfg::set_operation_out_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operation_out_num(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.operation_out_num)
}

// int32 operaBO_in = 13;
inline void Proto3CMDFieldCfg::clear_operabo_in() {
  operabo_in_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::_internal_operabo_in() const {
  return operabo_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::operabo_in() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.operaBO_in)
  return _internal_operabo_in();
}
inline void Proto3CMDFieldCfg::_internal_set_operabo_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operabo_in_ = value;
}
inline void Proto3CMDFieldCfg::set_operabo_in(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operabo_in(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.operaBO_in)
}

// int32 operaBO_out = 14;
inline void Proto3CMDFieldCfg::clear_operabo_out() {
  operabo_out_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::_internal_operabo_out() const {
  return operabo_out_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Proto3CMDFieldCfg::operabo_out() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.operaBO_out)
  return _internal_operabo_out();
}
inline void Proto3CMDFieldCfg::_internal_set_operabo_out(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  operabo_out_ = value;
}
inline void Proto3CMDFieldCfg::set_operabo_out(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_operabo_out(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.operaBO_out)
}

// string Lua_Script_in = 15;
inline void Proto3CMDFieldCfg::clear_lua_script_in() {
  lua_script_in_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3CMDFieldCfg::lua_script_in() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.Lua_Script_in)
  return _internal_lua_script_in();
}
inline void Proto3CMDFieldCfg::set_lua_script_in(const std::string& value) {
  _internal_set_lua_script_in(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.Lua_Script_in)
}
inline std::string* Proto3CMDFieldCfg::mutable_lua_script_in() {
  // @@protoc_insertion_point(field_mutable:Proto3CMDFieldCfg.Lua_Script_in)
  return _internal_mutable_lua_script_in();
}
inline const std::string& Proto3CMDFieldCfg::_internal_lua_script_in() const {
  return lua_script_in_.Get();
}
inline void Proto3CMDFieldCfg::_internal_set_lua_script_in(const std::string& value) {
  
  lua_script_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3CMDFieldCfg::set_lua_script_in(std::string&& value) {
  
  lua_script_in_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3CMDFieldCfg.Lua_Script_in)
}
inline void Proto3CMDFieldCfg::set_lua_script_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lua_script_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3CMDFieldCfg.Lua_Script_in)
}
inline void Proto3CMDFieldCfg::set_lua_script_in(const char* value,
    size_t size) {
  
  lua_script_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3CMDFieldCfg.Lua_Script_in)
}
inline std::string* Proto3CMDFieldCfg::_internal_mutable_lua_script_in() {
  
  return lua_script_in_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3CMDFieldCfg::release_lua_script_in() {
  // @@protoc_insertion_point(field_release:Proto3CMDFieldCfg.Lua_Script_in)
  return lua_script_in_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3CMDFieldCfg::set_allocated_lua_script_in(std::string* lua_script_in) {
  if (lua_script_in != nullptr) {
    
  } else {
    
  }
  lua_script_in_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lua_script_in,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3CMDFieldCfg.Lua_Script_in)
}

// string Lua_Script_out = 16;
inline void Proto3CMDFieldCfg::clear_lua_script_out() {
  lua_script_out_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Proto3CMDFieldCfg::lua_script_out() const {
  // @@protoc_insertion_point(field_get:Proto3CMDFieldCfg.Lua_Script_out)
  return _internal_lua_script_out();
}
inline void Proto3CMDFieldCfg::set_lua_script_out(const std::string& value) {
  _internal_set_lua_script_out(value);
  // @@protoc_insertion_point(field_set:Proto3CMDFieldCfg.Lua_Script_out)
}
inline std::string* Proto3CMDFieldCfg::mutable_lua_script_out() {
  // @@protoc_insertion_point(field_mutable:Proto3CMDFieldCfg.Lua_Script_out)
  return _internal_mutable_lua_script_out();
}
inline const std::string& Proto3CMDFieldCfg::_internal_lua_script_out() const {
  return lua_script_out_.Get();
}
inline void Proto3CMDFieldCfg::_internal_set_lua_script_out(const std::string& value) {
  
  lua_script_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Proto3CMDFieldCfg::set_lua_script_out(std::string&& value) {
  
  lua_script_out_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Proto3CMDFieldCfg.Lua_Script_out)
}
inline void Proto3CMDFieldCfg::set_lua_script_out(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lua_script_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Proto3CMDFieldCfg.Lua_Script_out)
}
inline void Proto3CMDFieldCfg::set_lua_script_out(const char* value,
    size_t size) {
  
  lua_script_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Proto3CMDFieldCfg.Lua_Script_out)
}
inline std::string* Proto3CMDFieldCfg::_internal_mutable_lua_script_out() {
  
  return lua_script_out_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Proto3CMDFieldCfg::release_lua_script_out() {
  // @@protoc_insertion_point(field_release:Proto3CMDFieldCfg.Lua_Script_out)
  return lua_script_out_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Proto3CMDFieldCfg::set_allocated_lua_script_out(std::string* lua_script_out) {
  if (lua_script_out != nullptr) {
    
  } else {
    
  }
  lua_script_out_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lua_script_out,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Proto3CMDFieldCfg.Lua_Script_out)
}

// -------------------------------------------------------------------

// TDSDataPayload

// .TDSDataPayload.Operation operation = 1;
inline void TDSDataPayload::clear_operation() {
  operation_ = 0;
}
inline ::TDSDataPayload_Operation TDSDataPayload::_internal_operation() const {
  return static_cast< ::TDSDataPayload_Operation >(operation_);
}
inline ::TDSDataPayload_Operation TDSDataPayload::operation() const {
  // @@protoc_insertion_point(field_get:TDSDataPayload.operation)
  return _internal_operation();
}
inline void TDSDataPayload::_internal_set_operation(::TDSDataPayload_Operation value) {
  
  operation_ = value;
}
inline void TDSDataPayload::set_operation(::TDSDataPayload_Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:TDSDataPayload.operation)
}

// repeated .google.protobuf.Any data = 3;
inline int TDSDataPayload::_internal_data_size() const {
  return data_.size();
}
inline int TDSDataPayload::data_size() const {
  return _internal_data_size();
}
inline PROTOBUF_NAMESPACE_ID::Any* TDSDataPayload::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:TDSDataPayload.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
TDSDataPayload::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:TDSDataPayload.data)
  return &data_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& TDSDataPayload::_internal_data(int index) const {
  return data_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Any& TDSDataPayload::data(int index) const {
  // @@protoc_insertion_point(field_get:TDSDataPayload.data)
  return _internal_data(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* TDSDataPayload::_internal_add_data() {
  return data_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Any* TDSDataPayload::add_data() {
  // @@protoc_insertion_point(field_add:TDSDataPayload.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
TDSDataPayload::data() const {
  // @@protoc_insertion_point(field_list:TDSDataPayload.data)
  return data_;
}

// -------------------------------------------------------------------

// TDSData

// string table = 1;
inline void TDSData::clear_table() {
  table_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TDSData::table() const {
  // @@protoc_insertion_point(field_get:TDSData.table)
  return _internal_table();
}
inline void TDSData::set_table(const std::string& value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:TDSData.table)
}
inline std::string* TDSData::mutable_table() {
  // @@protoc_insertion_point(field_mutable:TDSData.table)
  return _internal_mutable_table();
}
inline const std::string& TDSData::_internal_table() const {
  return table_.Get();
}
inline void TDSData::_internal_set_table(const std::string& value) {
  
  table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TDSData::set_table(std::string&& value) {
  
  table_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TDSData.table)
}
inline void TDSData::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TDSData.table)
}
inline void TDSData::set_table(const char* value,
    size_t size) {
  
  table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TDSData.table)
}
inline std::string* TDSData::_internal_mutable_table() {
  
  return table_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TDSData::release_table() {
  // @@protoc_insertion_point(field_release:TDSData.table)
  return table_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TDSData::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TDSData.table)
}

// .TDSData.Flags flags = 2;
inline void TDSData::clear_flags() {
  flags_ = 0;
}
inline ::TDSData_Flags TDSData::_internal_flags() const {
  return static_cast< ::TDSData_Flags >(flags_);
}
inline ::TDSData_Flags TDSData::flags() const {
  // @@protoc_insertion_point(field_get:TDSData.flags)
  return _internal_flags();
}
inline void TDSData::_internal_set_flags(::TDSData_Flags value) {
  
  flags_ = value;
}
inline void TDSData::set_flags(::TDSData_Flags value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:TDSData.flags)
}

// repeated .TDSDataPayload payload = 3;
inline int TDSData::_internal_payload_size() const {
  return payload_.size();
}
inline int TDSData::payload_size() const {
  return _internal_payload_size();
}
inline void TDSData::clear_payload() {
  payload_.Clear();
}
inline ::TDSDataPayload* TDSData::mutable_payload(int index) {
  // @@protoc_insertion_point(field_mutable:TDSData.payload)
  return payload_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDSDataPayload >*
TDSData::mutable_payload() {
  // @@protoc_insertion_point(field_mutable_list:TDSData.payload)
  return &payload_;
}
inline const ::TDSDataPayload& TDSData::_internal_payload(int index) const {
  return payload_.Get(index);
}
inline const ::TDSDataPayload& TDSData::payload(int index) const {
  // @@protoc_insertion_point(field_get:TDSData.payload)
  return _internal_payload(index);
}
inline ::TDSDataPayload* TDSData::_internal_add_payload() {
  return payload_.Add();
}
inline ::TDSDataPayload* TDSData::add_payload() {
  // @@protoc_insertion_point(field_add:TDSData.payload)
  return _internal_add_payload();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDSDataPayload >&
TDSData::payload() const {
  // @@protoc_insertion_point(field_list:TDSData.payload)
  return payload_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Proto3ProtocolTypeCfg_protoFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto3ProtocolTypeCfg_protoFormat>() {
  return ::Proto3ProtocolTypeCfg_protoFormat_descriptor();
}
template <> struct is_proto_enum< ::Proto3ProtocolFieldCfg_dataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto3ProtocolFieldCfg_dataType>() {
  return ::Proto3ProtocolFieldCfg_dataType_descriptor();
}
template <> struct is_proto_enum< ::TDSDataPayload_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TDSDataPayload_Operation>() {
  return ::TDSDataPayload_Operation_descriptor();
}
template <> struct is_proto_enum< ::TDSData_Flags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TDSData_Flags>() {
  return ::TDSData_Flags_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_datastruct_2eproto
