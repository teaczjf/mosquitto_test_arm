// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datastruct.proto

#include "datastruct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_datastruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Proto3CMDFieldCfg_datastruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_datastruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proto3DeviceCMDDefine_datastruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_datastruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TDSDataPayload_datastruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
class Proto3ProtocolTypeCfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proto3ProtocolTypeCfg> _instance;
} _Proto3ProtocolTypeCfg_default_instance_;
class Proto3ProtocolFieldCfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proto3ProtocolFieldCfg> _instance;
} _Proto3ProtocolFieldCfg_default_instance_;
class Proto3DeviceInfoCfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proto3DeviceInfoCfg> _instance;
} _Proto3DeviceInfoCfg_default_instance_;
class Proto3DeviceAllCMDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proto3DeviceAllCMD> _instance;
} _Proto3DeviceAllCMD_default_instance_;
class Proto3DeviceCMDDefineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proto3DeviceCMDDefine> _instance;
} _Proto3DeviceCMDDefine_default_instance_;
class Proto3CMDFieldCfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proto3CMDFieldCfg> _instance;
} _Proto3CMDFieldCfg_default_instance_;
class TDSDataPayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TDSDataPayload> _instance;
} _TDSDataPayload_default_instance_;
class TDSDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TDSData> _instance;
} _TDSData_default_instance_;
static void InitDefaultsscc_info_Proto3CMDFieldCfg_datastruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Proto3CMDFieldCfg_default_instance_;
    new (ptr) ::Proto3CMDFieldCfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto3CMDFieldCfg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Proto3CMDFieldCfg_datastruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Proto3CMDFieldCfg_datastruct_2eproto}, {}};

static void InitDefaultsscc_info_Proto3DeviceAllCMD_datastruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Proto3DeviceAllCMD_default_instance_;
    new (ptr) ::Proto3DeviceAllCMD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto3DeviceAllCMD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proto3DeviceAllCMD_datastruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Proto3DeviceAllCMD_datastruct_2eproto}, {
      &scc_info_Proto3DeviceCMDDefine_datastruct_2eproto.base,}};

static void InitDefaultsscc_info_Proto3DeviceCMDDefine_datastruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Proto3DeviceCMDDefine_default_instance_;
    new (ptr) ::Proto3DeviceCMDDefine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto3DeviceCMDDefine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proto3DeviceCMDDefine_datastruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Proto3DeviceCMDDefine_datastruct_2eproto}, {
      &scc_info_Proto3CMDFieldCfg_datastruct_2eproto.base,}};

static void InitDefaultsscc_info_Proto3DeviceInfoCfg_datastruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Proto3DeviceInfoCfg_default_instance_;
    new (ptr) ::Proto3DeviceInfoCfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto3DeviceInfoCfg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Proto3DeviceInfoCfg_datastruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Proto3DeviceInfoCfg_datastruct_2eproto}, {}};

static void InitDefaultsscc_info_Proto3ProtocolFieldCfg_datastruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Proto3ProtocolFieldCfg_default_instance_;
    new (ptr) ::Proto3ProtocolFieldCfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto3ProtocolFieldCfg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Proto3ProtocolFieldCfg_datastruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Proto3ProtocolFieldCfg_datastruct_2eproto}, {}};

static void InitDefaultsscc_info_Proto3ProtocolTypeCfg_datastruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Proto3ProtocolTypeCfg_default_instance_;
    new (ptr) ::Proto3ProtocolTypeCfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto3ProtocolTypeCfg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Proto3ProtocolTypeCfg_datastruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Proto3ProtocolTypeCfg_datastruct_2eproto}, {}};

static void InitDefaultsscc_info_TDSData_datastruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TDSData_default_instance_;
    new (ptr) ::TDSData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TDSData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TDSData_datastruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TDSData_datastruct_2eproto}, {
      &scc_info_TDSDataPayload_datastruct_2eproto.base,}};

static void InitDefaultsscc_info_TDSDataPayload_datastruct_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TDSDataPayload_default_instance_;
    new (ptr) ::TDSDataPayload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TDSDataPayload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TDSDataPayload_datastruct_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TDSDataPayload_datastruct_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_datastruct_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_datastruct_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_datastruct_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_datastruct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolTypeCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolTypeCfg, protoid_),
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolTypeCfg, protoname_),
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolTypeCfg, format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolFieldCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolFieldCfg, protoid_),
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolFieldCfg, fieldindex_),
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolFieldCfg, fieldname_),
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolFieldCfg, fieldsize_),
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolFieldCfg, value_),
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolFieldCfg, min_),
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolFieldCfg, max_),
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolFieldCfg, offset_),
  PROTOBUF_FIELD_OFFSET(::Proto3ProtocolFieldCfg, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, id_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, dev_name_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, cmd_excel_path_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, comunitate_mode_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, tcp_ip_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, tcp_port_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, udp_ip_src_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, udp_port_src_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, udp_ip_dst_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, udp_port_dst_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, udpmc_ip_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, udpmc_ip_tx_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, udpmc_port_tx_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, udpmc_ip_rx_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceInfoCfg, udpmc_port_rx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceAllCMD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceAllCMD, id_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceAllCMD, dev_name_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceAllCMD, protocol_name_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceAllCMD, cmds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceCMDDefine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceCMDDefine, cmd_name_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceCMDDefine, encode_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceCMDDefine, timing_cmd_cycle_period_),
  PROTOBUF_FIELD_OFFSET(::Proto3DeviceCMDDefine, felids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, id_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, fieldindex_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, fieldname_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, fieldsize_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, value_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, minvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, maxvalue_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, datatype_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, operation_in_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, operation_in_num_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, operation_out_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, operation_out_num_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, operabo_in_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, operabo_out_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, lua_script_in_),
  PROTOBUF_FIELD_OFFSET(::Proto3CMDFieldCfg, lua_script_out_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TDSDataPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TDSDataPayload, operation_),
  PROTOBUF_FIELD_OFFSET(::TDSDataPayload, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TDSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TDSData, table_),
  PROTOBUF_FIELD_OFFSET(::TDSData, flags_),
  PROTOBUF_FIELD_OFFSET(::TDSData, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Proto3ProtocolTypeCfg)},
  { 8, -1, sizeof(::Proto3ProtocolFieldCfg)},
  { 22, -1, sizeof(::Proto3DeviceInfoCfg)},
  { 42, -1, sizeof(::Proto3DeviceAllCMD)},
  { 51, -1, sizeof(::Proto3DeviceCMDDefine)},
  { 60, -1, sizeof(::Proto3CMDFieldCfg)},
  { 81, -1, sizeof(::TDSDataPayload)},
  { 88, -1, sizeof(::TDSData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Proto3ProtocolTypeCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Proto3ProtocolFieldCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Proto3DeviceInfoCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Proto3DeviceAllCMD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Proto3DeviceCMDDefine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Proto3CMDFieldCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TDSDataPayload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TDSData_default_instance_),
};

const char descriptor_table_protodef_datastruct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020datastruct.proto\032\031google/protobuf/any."
  "proto\032\037google/protobuf/timestamp.proto\"\266"
  "\001\n\025Proto3ProtocolTypeCfg\022\017\n\007protoId\030\001 \001("
  "\005\022\021\n\tprotoName\030\002 \001(\t\0222\n\006format\030\003 \001(\0162\".P"
  "roto3ProtocolTypeCfg.protoFormat\"E\n\013prot"
  "oFormat\022\020\n\014FORMAT_ASCII\020\000\022\016\n\nFORMAT_HEX\020"
  "\001\022\024\n\020FORMAT_ASCII_HEX\020\002\"\324\003\n\026Proto3Protoc"
  "olFieldCfg\022\017\n\007protoId\030\001 \001(\005\022\022\n\nfieldInde"
  "x\030\002 \001(\005\022\021\n\tfieldName\030\003 \001(\t\022\021\n\tfieldSize\030"
  "\004 \001(\005\022\r\n\005value\030\005 \001(\t\022\013\n\003min\030\006 \001(\t\022\013\n\003max"
  "\030\007 \001(\t\022\016\n\006offset\030\010 \001(\005\022.\n\004type\030\t \001(\0162 .P"
  "roto3ProtocolFieldCfg.dataType\"\205\002\n\010dataT"
  "ype\022\024\n\020DATATYPE_DEFAULT\020\000\022\020\n\014DATATYPE_ST"
  "R\020\001\022\025\n\021DATATYPE_UINT_STR\020\002\022\024\n\020DATATYPE_I"
  "NT_STR\020\003\022\026\n\022DATATYPE_FLOAT_STR\020\004\022\020\n\014DATA"
  "TYPE_END\020\005\022\020\n\014DATATYPE_HEX\020\006\022\024\n\020DATATYPE"
  "_HEX_STR\020\007\022\023\n\017DATATYPE_DOUBLE\020\010\022\024\n\020DATAT"
  "YPE_PAYLOAD\020\t\022\021\n\rDATATYPE_INT8\020\n\022\024\n\020DATA"
  "TYPE_TIMESTR\020\013\"\304\002\n\023Proto3DeviceInfoCfg\022\n"
  "\n\002ID\030\001 \001(\005\022\020\n\010DEV_NAME\030\002 \001(\t\022\026\n\016CMD_EXCE"
  "L_PATH\030\003 \001(\t\022\027\n\017COMUNITATE_MODE\030\004 \001(\t\022\016\n"
  "\006TCP_IP\030\005 \001(\t\022\020\n\010TCP_PORT\030\006 \001(\005\022\022\n\nUDP_I"
  "P_SRC\030\007 \001(\t\022\024\n\014UDP_PORT_SRC\030\010 \001(\005\022\022\n\nUDP"
  "_IP_DST\030\t \001(\t\022\024\n\014UDP_PORT_DST\030\n \001(\005\022\020\n\010U"
  "DPMC_IP\030\013 \001(\t\022\023\n\013UDPMC_IP_TX\030\014 \001(\t\022\025\n\rUD"
  "PMC_PORT_TX\030\r \001(\005\022\023\n\013UDPMC_IP_RX\030\016 \001(\t\022\025"
  "\n\rUDPMC_PORT_RX\030\017 \001(\005\"o\n\022Proto3DeviceAll"
  "CMD\022\n\n\002ID\030\001 \001(\005\022\020\n\010DEV_NAME\030\002 \001(\t\022\025\n\rPRO"
  "TOCOL_NAME\030\003 \001(\t\022$\n\004CMDs\030\004 \003(\0132\026.Proto3D"
  "eviceCMDDefine\"~\n\025Proto3DeviceCMDDefine\022"
  "\020\n\010CMD_NAME\030\001 \001(\t\022\016\n\006ENCODE\030\002 \001(\t\022\037\n\027Tim"
  "ing_CMD_Cycle_period\030\003 \001(\005\022\"\n\006felids\030\004 \003"
  "(\0132\022.Proto3CMDFieldCfg\"\330\002\n\021Proto3CMDFiel"
  "dCfg\022\n\n\002ID\030\001 \001(\005\022\022\n\nfieldIndex\030\002 \001(\005\022\021\n\t"
  "fieldName\030\003 \001(\t\022\021\n\tfieldSize\030\004 \001(\005\022\r\n\005va"
  "lue\030\005 \001(\t\022\020\n\010minValue\030\006 \001(\t\022\020\n\010maxValue\030"
  "\007 \001(\t\022\020\n\010dataType\030\010 \001(\005\022\024\n\014operation_in\030"
  "\t \001(\005\022\030\n\020operation_in_num\030\n \001(\005\022\025\n\ropera"
  "tion_out\030\013 \001(\005\022\031\n\021operation_out_num\030\014 \001("
  "\005\022\022\n\noperaBO_in\030\r \001(\005\022\023\n\013operaBO_out\030\016 \001"
  "(\005\022\025\n\rLua_Script_in\030\017 \001(\t\022\026\n\016Lua_Script_"
  "out\030\020 \001(\t\"\300\001\n\016TDSDataPayload\022,\n\toperatio"
  "n\030\001 \001(\0162\031.TDSDataPayload.Operation\022\"\n\004da"
  "ta\030\003 \003(\0132\024.google.protobuf.Any\"\\\n\tOperat"
  "ion\022\021\n\rOPERATION_ADD\020\000\022\021\n\rOPERATION_DEL\020"
  "\001\022\024\n\020OPERATION_UPDATE\020\002\022\023\n\017OPERATION_QUE"
  "RY\020\003\"\212\001\n\007TDSData\022\r\n\005table\030\001 \001(\t\022\035\n\005flags"
  "\030\002 \001(\0162\016.TDSData.Flags\022 \n\007payload\030\003 \003(\0132"
  "\017.TDSDataPayload\"/\n\005Flags\022\023\n\017NORMAL_DISP"
  "ATCH\020\000\022\021\n\rFULL_DISPATCH\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_datastruct_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_datastruct_2eproto_sccs[8] = {
  &scc_info_Proto3CMDFieldCfg_datastruct_2eproto.base,
  &scc_info_Proto3DeviceAllCMD_datastruct_2eproto.base,
  &scc_info_Proto3DeviceCMDDefine_datastruct_2eproto.base,
  &scc_info_Proto3DeviceInfoCfg_datastruct_2eproto.base,
  &scc_info_Proto3ProtocolFieldCfg_datastruct_2eproto.base,
  &scc_info_Proto3ProtocolTypeCfg_datastruct_2eproto.base,
  &scc_info_TDSData_datastruct_2eproto.base,
  &scc_info_TDSDataPayload_datastruct_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_datastruct_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datastruct_2eproto = {
  false, false, descriptor_table_protodef_datastruct_2eproto, "datastruct.proto", 1993,
  &descriptor_table_datastruct_2eproto_once, descriptor_table_datastruct_2eproto_sccs, descriptor_table_datastruct_2eproto_deps, 8, 2,
  schemas, file_default_instances, TableStruct_datastruct_2eproto::offsets,
  file_level_metadata_datastruct_2eproto, 8, file_level_enum_descriptors_datastruct_2eproto, file_level_service_descriptors_datastruct_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_datastruct_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_datastruct_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Proto3ProtocolTypeCfg_protoFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_datastruct_2eproto);
  return file_level_enum_descriptors_datastruct_2eproto[0];
}
bool Proto3ProtocolTypeCfg_protoFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Proto3ProtocolTypeCfg_protoFormat Proto3ProtocolTypeCfg::FORMAT_ASCII;
constexpr Proto3ProtocolTypeCfg_protoFormat Proto3ProtocolTypeCfg::FORMAT_HEX;
constexpr Proto3ProtocolTypeCfg_protoFormat Proto3ProtocolTypeCfg::FORMAT_ASCII_HEX;
constexpr Proto3ProtocolTypeCfg_protoFormat Proto3ProtocolTypeCfg::protoFormat_MIN;
constexpr Proto3ProtocolTypeCfg_protoFormat Proto3ProtocolTypeCfg::protoFormat_MAX;
constexpr int Proto3ProtocolTypeCfg::protoFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Proto3ProtocolFieldCfg_dataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_datastruct_2eproto);
  return file_level_enum_descriptors_datastruct_2eproto[1];
}
bool Proto3ProtocolFieldCfg_dataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::DATATYPE_DEFAULT;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::DATATYPE_STR;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::DATATYPE_UINT_STR;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::DATATYPE_INT_STR;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::DATATYPE_FLOAT_STR;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::DATATYPE_END;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::DATATYPE_HEX;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::DATATYPE_HEX_STR;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::DATATYPE_DOUBLE;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::DATATYPE_PAYLOAD;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::DATATYPE_INT8;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::DATATYPE_TIMESTR;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::dataType_MIN;
constexpr Proto3ProtocolFieldCfg_dataType Proto3ProtocolFieldCfg::dataType_MAX;
constexpr int Proto3ProtocolFieldCfg::dataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDSDataPayload_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_datastruct_2eproto);
  return file_level_enum_descriptors_datastruct_2eproto[2];
}
bool TDSDataPayload_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TDSDataPayload_Operation TDSDataPayload::OPERATION_ADD;
constexpr TDSDataPayload_Operation TDSDataPayload::OPERATION_DEL;
constexpr TDSDataPayload_Operation TDSDataPayload::OPERATION_UPDATE;
constexpr TDSDataPayload_Operation TDSDataPayload::OPERATION_QUERY;
constexpr TDSDataPayload_Operation TDSDataPayload::Operation_MIN;
constexpr TDSDataPayload_Operation TDSDataPayload::Operation_MAX;
constexpr int TDSDataPayload::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TDSData_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_datastruct_2eproto);
  return file_level_enum_descriptors_datastruct_2eproto[3];
}
bool TDSData_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TDSData_Flags TDSData::NORMAL_DISPATCH;
constexpr TDSData_Flags TDSData::FULL_DISPATCH;
constexpr TDSData_Flags TDSData::Flags_MIN;
constexpr TDSData_Flags TDSData::Flags_MAX;
constexpr int TDSData::Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Proto3ProtocolTypeCfg::InitAsDefaultInstance() {
}
class Proto3ProtocolTypeCfg::_Internal {
 public:
};

Proto3ProtocolTypeCfg::Proto3ProtocolTypeCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto3ProtocolTypeCfg)
}
Proto3ProtocolTypeCfg::Proto3ProtocolTypeCfg(const Proto3ProtocolTypeCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protoname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protoname().empty()) {
    protoname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_protoname(),
      GetArena());
  }
  ::memcpy(&protoid_, &from.protoid_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&protoid_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:Proto3ProtocolTypeCfg)
}

void Proto3ProtocolTypeCfg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proto3ProtocolTypeCfg_datastruct_2eproto.base);
  protoname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&protoid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&protoid_)) + sizeof(format_));
}

Proto3ProtocolTypeCfg::~Proto3ProtocolTypeCfg() {
  // @@protoc_insertion_point(destructor:Proto3ProtocolTypeCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Proto3ProtocolTypeCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protoname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Proto3ProtocolTypeCfg::ArenaDtor(void* object) {
  Proto3ProtocolTypeCfg* _this = reinterpret_cast< Proto3ProtocolTypeCfg* >(object);
  (void)_this;
}
void Proto3ProtocolTypeCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proto3ProtocolTypeCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proto3ProtocolTypeCfg& Proto3ProtocolTypeCfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proto3ProtocolTypeCfg_datastruct_2eproto.base);
  return *internal_default_instance();
}


void Proto3ProtocolTypeCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto3ProtocolTypeCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protoname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&protoid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&protoid_)) + sizeof(format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proto3ProtocolTypeCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 protoId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          protoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protoName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_protoname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3ProtocolTypeCfg.protoName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto3ProtocolTypeCfg.protoFormat format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::Proto3ProtocolTypeCfg_protoFormat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proto3ProtocolTypeCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto3ProtocolTypeCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 protoId = 1;
  if (this->protoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_protoid(), target);
  }

  // string protoName = 2;
  if (this->protoname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protoname().data(), static_cast<int>(this->_internal_protoname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3ProtocolTypeCfg.protoName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_protoname(), target);
  }

  // .Proto3ProtocolTypeCfg.protoFormat format = 3;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto3ProtocolTypeCfg)
  return target;
}

size_t Proto3ProtocolTypeCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto3ProtocolTypeCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protoName = 2;
  if (this->protoname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protoname());
  }

  // int32 protoId = 1;
  if (this->protoid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_protoid());
  }

  // .Proto3ProtocolTypeCfg.protoFormat format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proto3ProtocolTypeCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto3ProtocolTypeCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const Proto3ProtocolTypeCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proto3ProtocolTypeCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto3ProtocolTypeCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto3ProtocolTypeCfg)
    MergeFrom(*source);
  }
}

void Proto3ProtocolTypeCfg::MergeFrom(const Proto3ProtocolTypeCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto3ProtocolTypeCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protoname().size() > 0) {
    _internal_set_protoname(from._internal_protoname());
  }
  if (from.protoid() != 0) {
    _internal_set_protoid(from._internal_protoid());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
}

void Proto3ProtocolTypeCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto3ProtocolTypeCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto3ProtocolTypeCfg::CopyFrom(const Proto3ProtocolTypeCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto3ProtocolTypeCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto3ProtocolTypeCfg::IsInitialized() const {
  return true;
}

void Proto3ProtocolTypeCfg::InternalSwap(Proto3ProtocolTypeCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protoname_.Swap(&other->protoname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proto3ProtocolTypeCfg, format_)
      + sizeof(Proto3ProtocolTypeCfg::format_)
      - PROTOBUF_FIELD_OFFSET(Proto3ProtocolTypeCfg, protoid_)>(
          reinterpret_cast<char*>(&protoid_),
          reinterpret_cast<char*>(&other->protoid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proto3ProtocolTypeCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Proto3ProtocolFieldCfg::InitAsDefaultInstance() {
}
class Proto3ProtocolFieldCfg::_Internal {
 public:
};

Proto3ProtocolFieldCfg::Proto3ProtocolFieldCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto3ProtocolFieldCfg)
}
Proto3ProtocolFieldCfg::Proto3ProtocolFieldCfg(const Proto3ProtocolFieldCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fieldname().empty()) {
    fieldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fieldname(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  min_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_min().empty()) {
    min_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_min(),
      GetArena());
  }
  max_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max().empty()) {
    max_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_max(),
      GetArena());
  }
  ::memcpy(&protoid_, &from.protoid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&protoid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Proto3ProtocolFieldCfg)
}

void Proto3ProtocolFieldCfg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proto3ProtocolFieldCfg_datastruct_2eproto.base);
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  min_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&protoid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&protoid_)) + sizeof(type_));
}

Proto3ProtocolFieldCfg::~Proto3ProtocolFieldCfg() {
  // @@protoc_insertion_point(destructor:Proto3ProtocolFieldCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Proto3ProtocolFieldCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fieldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  min_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Proto3ProtocolFieldCfg::ArenaDtor(void* object) {
  Proto3ProtocolFieldCfg* _this = reinterpret_cast< Proto3ProtocolFieldCfg* >(object);
  (void)_this;
}
void Proto3ProtocolFieldCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proto3ProtocolFieldCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proto3ProtocolFieldCfg& Proto3ProtocolFieldCfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proto3ProtocolFieldCfg_datastruct_2eproto.base);
  return *internal_default_instance();
}


void Proto3ProtocolFieldCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto3ProtocolFieldCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  min_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&protoid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&protoid_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proto3ProtocolFieldCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 protoId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          protoid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fieldIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fieldindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fieldName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fieldname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3ProtocolFieldCfg.fieldName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fieldSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fieldsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3ProtocolFieldCfg.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_min();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3ProtocolFieldCfg.min"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string max = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_max();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3ProtocolFieldCfg.max"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Proto3ProtocolFieldCfg.dataType type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Proto3ProtocolFieldCfg_dataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proto3ProtocolFieldCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto3ProtocolFieldCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 protoId = 1;
  if (this->protoid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_protoid(), target);
  }

  // int32 fieldIndex = 2;
  if (this->fieldindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fieldindex(), target);
  }

  // string fieldName = 3;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fieldname().data(), static_cast<int>(this->_internal_fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3ProtocolFieldCfg.fieldName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fieldname(), target);
  }

  // int32 fieldSize = 4;
  if (this->fieldsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fieldsize(), target);
  }

  // string value = 5;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3ProtocolFieldCfg.value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_value(), target);
  }

  // string min = 6;
  if (this->min().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_min().data(), static_cast<int>(this->_internal_min().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3ProtocolFieldCfg.min");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_min(), target);
  }

  // string max = 7;
  if (this->max().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max().data(), static_cast<int>(this->_internal_max().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3ProtocolFieldCfg.max");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_max(), target);
  }

  // int32 offset = 8;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_offset(), target);
  }

  // .Proto3ProtocolFieldCfg.dataType type = 9;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto3ProtocolFieldCfg)
  return target;
}

size_t Proto3ProtocolFieldCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto3ProtocolFieldCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fieldName = 3;
  if (this->fieldname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fieldname());
  }

  // string value = 5;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string min = 6;
  if (this->min().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_min());
  }

  // string max = 7;
  if (this->max().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max());
  }

  // int32 protoId = 1;
  if (this->protoid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_protoid());
  }

  // int32 fieldIndex = 2;
  if (this->fieldindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fieldindex());
  }

  // int32 fieldSize = 4;
  if (this->fieldsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fieldsize());
  }

  // int32 offset = 8;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // .Proto3ProtocolFieldCfg.dataType type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proto3ProtocolFieldCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto3ProtocolFieldCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const Proto3ProtocolFieldCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proto3ProtocolFieldCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto3ProtocolFieldCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto3ProtocolFieldCfg)
    MergeFrom(*source);
  }
}

void Proto3ProtocolFieldCfg::MergeFrom(const Proto3ProtocolFieldCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto3ProtocolFieldCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fieldname().size() > 0) {
    _internal_set_fieldname(from._internal_fieldname());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.min().size() > 0) {
    _internal_set_min(from._internal_min());
  }
  if (from.max().size() > 0) {
    _internal_set_max(from._internal_max());
  }
  if (from.protoid() != 0) {
    _internal_set_protoid(from._internal_protoid());
  }
  if (from.fieldindex() != 0) {
    _internal_set_fieldindex(from._internal_fieldindex());
  }
  if (from.fieldsize() != 0) {
    _internal_set_fieldsize(from._internal_fieldsize());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Proto3ProtocolFieldCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto3ProtocolFieldCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto3ProtocolFieldCfg::CopyFrom(const Proto3ProtocolFieldCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto3ProtocolFieldCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto3ProtocolFieldCfg::IsInitialized() const {
  return true;
}

void Proto3ProtocolFieldCfg::InternalSwap(Proto3ProtocolFieldCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fieldname_.Swap(&other->fieldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  min_.Swap(&other->min_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_.Swap(&other->max_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proto3ProtocolFieldCfg, type_)
      + sizeof(Proto3ProtocolFieldCfg::type_)
      - PROTOBUF_FIELD_OFFSET(Proto3ProtocolFieldCfg, protoid_)>(
          reinterpret_cast<char*>(&protoid_),
          reinterpret_cast<char*>(&other->protoid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proto3ProtocolFieldCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Proto3DeviceInfoCfg::InitAsDefaultInstance() {
}
class Proto3DeviceInfoCfg::_Internal {
 public:
};

Proto3DeviceInfoCfg::Proto3DeviceInfoCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto3DeviceInfoCfg)
}
Proto3DeviceInfoCfg::Proto3DeviceInfoCfg(const Proto3DeviceInfoCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_name().empty()) {
    dev_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_name(),
      GetArena());
  }
  cmd_excel_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cmd_excel_path().empty()) {
    cmd_excel_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cmd_excel_path(),
      GetArena());
  }
  comunitate_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_comunitate_mode().empty()) {
    comunitate_mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_comunitate_mode(),
      GetArena());
  }
  tcp_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tcp_ip().empty()) {
    tcp_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tcp_ip(),
      GetArena());
  }
  udp_ip_src_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_udp_ip_src().empty()) {
    udp_ip_src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_udp_ip_src(),
      GetArena());
  }
  udp_ip_dst_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_udp_ip_dst().empty()) {
    udp_ip_dst_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_udp_ip_dst(),
      GetArena());
  }
  udpmc_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_udpmc_ip().empty()) {
    udpmc_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_udpmc_ip(),
      GetArena());
  }
  udpmc_ip_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_udpmc_ip_tx().empty()) {
    udpmc_ip_tx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_udpmc_ip_tx(),
      GetArena());
  }
  udpmc_ip_rx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_udpmc_ip_rx().empty()) {
    udpmc_ip_rx_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_udpmc_ip_rx(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&udpmc_port_rx_) -
    reinterpret_cast<char*>(&id_)) + sizeof(udpmc_port_rx_));
  // @@protoc_insertion_point(copy_constructor:Proto3DeviceInfoCfg)
}

void Proto3DeviceInfoCfg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proto3DeviceInfoCfg_datastruct_2eproto.base);
  dev_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_excel_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comunitate_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udp_ip_src_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udp_ip_dst_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udpmc_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udpmc_ip_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udpmc_ip_rx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udpmc_port_rx_) -
      reinterpret_cast<char*>(&id_)) + sizeof(udpmc_port_rx_));
}

Proto3DeviceInfoCfg::~Proto3DeviceInfoCfg() {
  // @@protoc_insertion_point(destructor:Proto3DeviceInfoCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Proto3DeviceInfoCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_excel_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comunitate_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tcp_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udp_ip_src_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udp_ip_dst_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udpmc_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udpmc_ip_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  udpmc_ip_rx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Proto3DeviceInfoCfg::ArenaDtor(void* object) {
  Proto3DeviceInfoCfg* _this = reinterpret_cast< Proto3DeviceInfoCfg* >(object);
  (void)_this;
}
void Proto3DeviceInfoCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proto3DeviceInfoCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proto3DeviceInfoCfg& Proto3DeviceInfoCfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proto3DeviceInfoCfg_datastruct_2eproto.base);
  return *internal_default_instance();
}


void Proto3DeviceInfoCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto3DeviceInfoCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dev_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cmd_excel_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comunitate_mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tcp_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  udp_ip_src_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  udp_ip_dst_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  udpmc_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  udpmc_ip_tx_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  udpmc_ip_rx_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&udpmc_port_rx_) -
      reinterpret_cast<char*>(&id_)) + sizeof(udpmc_port_rx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proto3DeviceInfoCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DEV_NAME = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dev_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceInfoCfg.DEV_NAME"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string CMD_EXCEL_PATH = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_cmd_excel_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceInfoCfg.CMD_EXCEL_PATH"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string COMUNITATE_MODE = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_comunitate_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceInfoCfg.COMUNITATE_MODE"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string TCP_IP = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tcp_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceInfoCfg.TCP_IP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 TCP_PORT = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tcp_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UDP_IP_SRC = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_udp_ip_src();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceInfoCfg.UDP_IP_SRC"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UDP_PORT_SRC = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          udp_port_src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UDP_IP_DST = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_udp_ip_dst();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceInfoCfg.UDP_IP_DST"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UDP_PORT_DST = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          udp_port_dst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UDPMC_IP = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_udpmc_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceInfoCfg.UDPMC_IP"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UDPMC_IP_TX = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_udpmc_ip_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceInfoCfg.UDPMC_IP_TX"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UDPMC_PORT_TX = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          udpmc_port_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string UDPMC_IP_RX = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_udpmc_ip_rx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceInfoCfg.UDPMC_IP_RX"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 UDPMC_PORT_RX = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          udpmc_port_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proto3DeviceInfoCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto3DeviceInfoCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string DEV_NAME = 2;
  if (this->dev_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_name().data(), static_cast<int>(this->_internal_dev_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceInfoCfg.DEV_NAME");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dev_name(), target);
  }

  // string CMD_EXCEL_PATH = 3;
  if (this->cmd_excel_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd_excel_path().data(), static_cast<int>(this->_internal_cmd_excel_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceInfoCfg.CMD_EXCEL_PATH");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_cmd_excel_path(), target);
  }

  // string COMUNITATE_MODE = 4;
  if (this->comunitate_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comunitate_mode().data(), static_cast<int>(this->_internal_comunitate_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceInfoCfg.COMUNITATE_MODE");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_comunitate_mode(), target);
  }

  // string TCP_IP = 5;
  if (this->tcp_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tcp_ip().data(), static_cast<int>(this->_internal_tcp_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceInfoCfg.TCP_IP");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tcp_ip(), target);
  }

  // int32 TCP_PORT = 6;
  if (this->tcp_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_tcp_port(), target);
  }

  // string UDP_IP_SRC = 7;
  if (this->udp_ip_src().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_udp_ip_src().data(), static_cast<int>(this->_internal_udp_ip_src().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceInfoCfg.UDP_IP_SRC");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_udp_ip_src(), target);
  }

  // int32 UDP_PORT_SRC = 8;
  if (this->udp_port_src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_udp_port_src(), target);
  }

  // string UDP_IP_DST = 9;
  if (this->udp_ip_dst().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_udp_ip_dst().data(), static_cast<int>(this->_internal_udp_ip_dst().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceInfoCfg.UDP_IP_DST");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_udp_ip_dst(), target);
  }

  // int32 UDP_PORT_DST = 10;
  if (this->udp_port_dst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_udp_port_dst(), target);
  }

  // string UDPMC_IP = 11;
  if (this->udpmc_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_udpmc_ip().data(), static_cast<int>(this->_internal_udpmc_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceInfoCfg.UDPMC_IP");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_udpmc_ip(), target);
  }

  // string UDPMC_IP_TX = 12;
  if (this->udpmc_ip_tx().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_udpmc_ip_tx().data(), static_cast<int>(this->_internal_udpmc_ip_tx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceInfoCfg.UDPMC_IP_TX");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_udpmc_ip_tx(), target);
  }

  // int32 UDPMC_PORT_TX = 13;
  if (this->udpmc_port_tx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_udpmc_port_tx(), target);
  }

  // string UDPMC_IP_RX = 14;
  if (this->udpmc_ip_rx().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_udpmc_ip_rx().data(), static_cast<int>(this->_internal_udpmc_ip_rx().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceInfoCfg.UDPMC_IP_RX");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_udpmc_ip_rx(), target);
  }

  // int32 UDPMC_PORT_RX = 15;
  if (this->udpmc_port_rx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_udpmc_port_rx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto3DeviceInfoCfg)
  return target;
}

size_t Proto3DeviceInfoCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto3DeviceInfoCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DEV_NAME = 2;
  if (this->dev_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_name());
  }

  // string CMD_EXCEL_PATH = 3;
  if (this->cmd_excel_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd_excel_path());
  }

  // string COMUNITATE_MODE = 4;
  if (this->comunitate_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comunitate_mode());
  }

  // string TCP_IP = 5;
  if (this->tcp_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tcp_ip());
  }

  // string UDP_IP_SRC = 7;
  if (this->udp_ip_src().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_udp_ip_src());
  }

  // string UDP_IP_DST = 9;
  if (this->udp_ip_dst().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_udp_ip_dst());
  }

  // string UDPMC_IP = 11;
  if (this->udpmc_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_udpmc_ip());
  }

  // string UDPMC_IP_TX = 12;
  if (this->udpmc_ip_tx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_udpmc_ip_tx());
  }

  // string UDPMC_IP_RX = 14;
  if (this->udpmc_ip_rx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_udpmc_ip_rx());
  }

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 TCP_PORT = 6;
  if (this->tcp_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tcp_port());
  }

  // int32 UDP_PORT_SRC = 8;
  if (this->udp_port_src() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_udp_port_src());
  }

  // int32 UDP_PORT_DST = 10;
  if (this->udp_port_dst() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_udp_port_dst());
  }

  // int32 UDPMC_PORT_TX = 13;
  if (this->udpmc_port_tx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_udpmc_port_tx());
  }

  // int32 UDPMC_PORT_RX = 15;
  if (this->udpmc_port_rx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_udpmc_port_rx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proto3DeviceInfoCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto3DeviceInfoCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const Proto3DeviceInfoCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proto3DeviceInfoCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto3DeviceInfoCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto3DeviceInfoCfg)
    MergeFrom(*source);
  }
}

void Proto3DeviceInfoCfg::MergeFrom(const Proto3DeviceInfoCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto3DeviceInfoCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dev_name().size() > 0) {
    _internal_set_dev_name(from._internal_dev_name());
  }
  if (from.cmd_excel_path().size() > 0) {
    _internal_set_cmd_excel_path(from._internal_cmd_excel_path());
  }
  if (from.comunitate_mode().size() > 0) {
    _internal_set_comunitate_mode(from._internal_comunitate_mode());
  }
  if (from.tcp_ip().size() > 0) {
    _internal_set_tcp_ip(from._internal_tcp_ip());
  }
  if (from.udp_ip_src().size() > 0) {
    _internal_set_udp_ip_src(from._internal_udp_ip_src());
  }
  if (from.udp_ip_dst().size() > 0) {
    _internal_set_udp_ip_dst(from._internal_udp_ip_dst());
  }
  if (from.udpmc_ip().size() > 0) {
    _internal_set_udpmc_ip(from._internal_udpmc_ip());
  }
  if (from.udpmc_ip_tx().size() > 0) {
    _internal_set_udpmc_ip_tx(from._internal_udpmc_ip_tx());
  }
  if (from.udpmc_ip_rx().size() > 0) {
    _internal_set_udpmc_ip_rx(from._internal_udpmc_ip_rx());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.tcp_port() != 0) {
    _internal_set_tcp_port(from._internal_tcp_port());
  }
  if (from.udp_port_src() != 0) {
    _internal_set_udp_port_src(from._internal_udp_port_src());
  }
  if (from.udp_port_dst() != 0) {
    _internal_set_udp_port_dst(from._internal_udp_port_dst());
  }
  if (from.udpmc_port_tx() != 0) {
    _internal_set_udpmc_port_tx(from._internal_udpmc_port_tx());
  }
  if (from.udpmc_port_rx() != 0) {
    _internal_set_udpmc_port_rx(from._internal_udpmc_port_rx());
  }
}

void Proto3DeviceInfoCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto3DeviceInfoCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto3DeviceInfoCfg::CopyFrom(const Proto3DeviceInfoCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto3DeviceInfoCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto3DeviceInfoCfg::IsInitialized() const {
  return true;
}

void Proto3DeviceInfoCfg::InternalSwap(Proto3DeviceInfoCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dev_name_.Swap(&other->dev_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cmd_excel_path_.Swap(&other->cmd_excel_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comunitate_mode_.Swap(&other->comunitate_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tcp_ip_.Swap(&other->tcp_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  udp_ip_src_.Swap(&other->udp_ip_src_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  udp_ip_dst_.Swap(&other->udp_ip_dst_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  udpmc_ip_.Swap(&other->udpmc_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  udpmc_ip_tx_.Swap(&other->udpmc_ip_tx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  udpmc_ip_rx_.Swap(&other->udpmc_ip_rx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proto3DeviceInfoCfg, udpmc_port_rx_)
      + sizeof(Proto3DeviceInfoCfg::udpmc_port_rx_)
      - PROTOBUF_FIELD_OFFSET(Proto3DeviceInfoCfg, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proto3DeviceInfoCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Proto3DeviceAllCMD::InitAsDefaultInstance() {
}
class Proto3DeviceAllCMD::_Internal {
 public:
};

Proto3DeviceAllCMD::Proto3DeviceAllCMD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cmds_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto3DeviceAllCMD)
}
Proto3DeviceAllCMD::Proto3DeviceAllCMD(const Proto3DeviceAllCMD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cmds_(from.cmds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dev_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_name().empty()) {
    dev_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dev_name(),
      GetArena());
  }
  protocol_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_name().empty()) {
    protocol_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_protocol_name(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Proto3DeviceAllCMD)
}

void Proto3DeviceAllCMD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proto3DeviceAllCMD_datastruct_2eproto.base);
  dev_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

Proto3DeviceAllCMD::~Proto3DeviceAllCMD() {
  // @@protoc_insertion_point(destructor:Proto3DeviceAllCMD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Proto3DeviceAllCMD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dev_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Proto3DeviceAllCMD::ArenaDtor(void* object) {
  Proto3DeviceAllCMD* _this = reinterpret_cast< Proto3DeviceAllCMD* >(object);
  (void)_this;
}
void Proto3DeviceAllCMD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proto3DeviceAllCMD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proto3DeviceAllCMD& Proto3DeviceAllCMD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proto3DeviceAllCMD_datastruct_2eproto.base);
  return *internal_default_instance();
}


void Proto3DeviceAllCMD::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto3DeviceAllCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmds_.Clear();
  dev_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  protocol_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proto3DeviceAllCMD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DEV_NAME = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dev_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceAllCMD.DEV_NAME"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string PROTOCOL_NAME = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_protocol_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceAllCMD.PROTOCOL_NAME"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto3DeviceCMDDefine CMDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cmds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proto3DeviceAllCMD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto3DeviceAllCMD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string DEV_NAME = 2;
  if (this->dev_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dev_name().data(), static_cast<int>(this->_internal_dev_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceAllCMD.DEV_NAME");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dev_name(), target);
  }

  // string PROTOCOL_NAME = 3;
  if (this->protocol_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_name().data(), static_cast<int>(this->_internal_protocol_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceAllCMD.PROTOCOL_NAME");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_protocol_name(), target);
  }

  // repeated .Proto3DeviceCMDDefine CMDs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cmds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_cmds(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto3DeviceAllCMD)
  return target;
}

size_t Proto3DeviceAllCMD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto3DeviceAllCMD)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto3DeviceCMDDefine CMDs = 4;
  total_size += 1UL * this->_internal_cmds_size();
  for (const auto& msg : this->cmds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string DEV_NAME = 2;
  if (this->dev_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dev_name());
  }

  // string PROTOCOL_NAME = 3;
  if (this->protocol_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_name());
  }

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proto3DeviceAllCMD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto3DeviceAllCMD)
  GOOGLE_DCHECK_NE(&from, this);
  const Proto3DeviceAllCMD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proto3DeviceAllCMD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto3DeviceAllCMD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto3DeviceAllCMD)
    MergeFrom(*source);
  }
}

void Proto3DeviceAllCMD::MergeFrom(const Proto3DeviceAllCMD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto3DeviceAllCMD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cmds_.MergeFrom(from.cmds_);
  if (from.dev_name().size() > 0) {
    _internal_set_dev_name(from._internal_dev_name());
  }
  if (from.protocol_name().size() > 0) {
    _internal_set_protocol_name(from._internal_protocol_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Proto3DeviceAllCMD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto3DeviceAllCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto3DeviceAllCMD::CopyFrom(const Proto3DeviceAllCMD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto3DeviceAllCMD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto3DeviceAllCMD::IsInitialized() const {
  return true;
}

void Proto3DeviceAllCMD::InternalSwap(Proto3DeviceAllCMD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cmds_.InternalSwap(&other->cmds_);
  dev_name_.Swap(&other->dev_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  protocol_name_.Swap(&other->protocol_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Proto3DeviceAllCMD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Proto3DeviceCMDDefine::InitAsDefaultInstance() {
}
class Proto3DeviceCMDDefine::_Internal {
 public:
};

Proto3DeviceCMDDefine::Proto3DeviceCMDDefine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  felids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto3DeviceCMDDefine)
}
Proto3DeviceCMDDefine::Proto3DeviceCMDDefine(const Proto3DeviceCMDDefine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      felids_(from.felids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cmd_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cmd_name().empty()) {
    cmd_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cmd_name(),
      GetArena());
  }
  encode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encode().empty()) {
    encode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encode(),
      GetArena());
  }
  timing_cmd_cycle_period_ = from.timing_cmd_cycle_period_;
  // @@protoc_insertion_point(copy_constructor:Proto3DeviceCMDDefine)
}

void Proto3DeviceCMDDefine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proto3DeviceCMDDefine_datastruct_2eproto.base);
  cmd_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timing_cmd_cycle_period_ = 0;
}

Proto3DeviceCMDDefine::~Proto3DeviceCMDDefine() {
  // @@protoc_insertion_point(destructor:Proto3DeviceCMDDefine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Proto3DeviceCMDDefine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  cmd_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Proto3DeviceCMDDefine::ArenaDtor(void* object) {
  Proto3DeviceCMDDefine* _this = reinterpret_cast< Proto3DeviceCMDDefine* >(object);
  (void)_this;
}
void Proto3DeviceCMDDefine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proto3DeviceCMDDefine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proto3DeviceCMDDefine& Proto3DeviceCMDDefine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proto3DeviceCMDDefine_datastruct_2eproto.base);
  return *internal_default_instance();
}


void Proto3DeviceCMDDefine::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto3DeviceCMDDefine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  felids_.Clear();
  cmd_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  encode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timing_cmd_cycle_period_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proto3DeviceCMDDefine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string CMD_NAME = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cmd_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceCMDDefine.CMD_NAME"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ENCODE = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_encode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3DeviceCMDDefine.ENCODE"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Timing_CMD_Cycle_period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timing_cmd_cycle_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Proto3CMDFieldCfg felids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_felids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proto3DeviceCMDDefine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto3DeviceCMDDefine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string CMD_NAME = 1;
  if (this->cmd_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cmd_name().data(), static_cast<int>(this->_internal_cmd_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceCMDDefine.CMD_NAME");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cmd_name(), target);
  }

  // string ENCODE = 2;
  if (this->encode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encode().data(), static_cast<int>(this->_internal_encode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3DeviceCMDDefine.ENCODE");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_encode(), target);
  }

  // int32 Timing_CMD_Cycle_period = 3;
  if (this->timing_cmd_cycle_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timing_cmd_cycle_period(), target);
  }

  // repeated .Proto3CMDFieldCfg felids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_felids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_felids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto3DeviceCMDDefine)
  return target;
}

size_t Proto3DeviceCMDDefine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto3DeviceCMDDefine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto3CMDFieldCfg felids = 4;
  total_size += 1UL * this->_internal_felids_size();
  for (const auto& msg : this->felids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string CMD_NAME = 1;
  if (this->cmd_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cmd_name());
  }

  // string ENCODE = 2;
  if (this->encode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encode());
  }

  // int32 Timing_CMD_Cycle_period = 3;
  if (this->timing_cmd_cycle_period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timing_cmd_cycle_period());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proto3DeviceCMDDefine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto3DeviceCMDDefine)
  GOOGLE_DCHECK_NE(&from, this);
  const Proto3DeviceCMDDefine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proto3DeviceCMDDefine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto3DeviceCMDDefine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto3DeviceCMDDefine)
    MergeFrom(*source);
  }
}

void Proto3DeviceCMDDefine::MergeFrom(const Proto3DeviceCMDDefine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto3DeviceCMDDefine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  felids_.MergeFrom(from.felids_);
  if (from.cmd_name().size() > 0) {
    _internal_set_cmd_name(from._internal_cmd_name());
  }
  if (from.encode().size() > 0) {
    _internal_set_encode(from._internal_encode());
  }
  if (from.timing_cmd_cycle_period() != 0) {
    _internal_set_timing_cmd_cycle_period(from._internal_timing_cmd_cycle_period());
  }
}

void Proto3DeviceCMDDefine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto3DeviceCMDDefine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto3DeviceCMDDefine::CopyFrom(const Proto3DeviceCMDDefine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto3DeviceCMDDefine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto3DeviceCMDDefine::IsInitialized() const {
  return true;
}

void Proto3DeviceCMDDefine::InternalSwap(Proto3DeviceCMDDefine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  felids_.InternalSwap(&other->felids_);
  cmd_name_.Swap(&other->cmd_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  encode_.Swap(&other->encode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timing_cmd_cycle_period_, other->timing_cmd_cycle_period_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Proto3DeviceCMDDefine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Proto3CMDFieldCfg::InitAsDefaultInstance() {
}
class Proto3CMDFieldCfg::_Internal {
 public:
};

Proto3CMDFieldCfg::Proto3CMDFieldCfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Proto3CMDFieldCfg)
}
Proto3CMDFieldCfg::Proto3CMDFieldCfg(const Proto3CMDFieldCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fieldname().empty()) {
    fieldname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_fieldname(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  minvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_minvalue().empty()) {
    minvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_minvalue(),
      GetArena());
  }
  maxvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maxvalue().empty()) {
    maxvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_maxvalue(),
      GetArena());
  }
  lua_script_in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lua_script_in().empty()) {
    lua_script_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lua_script_in(),
      GetArena());
  }
  lua_script_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lua_script_out().empty()) {
    lua_script_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lua_script_out(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&operabo_out_) -
    reinterpret_cast<char*>(&id_)) + sizeof(operabo_out_));
  // @@protoc_insertion_point(copy_constructor:Proto3CMDFieldCfg)
}

void Proto3CMDFieldCfg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proto3CMDFieldCfg_datastruct_2eproto.base);
  fieldname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  minvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lua_script_in_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lua_script_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operabo_out_) -
      reinterpret_cast<char*>(&id_)) + sizeof(operabo_out_));
}

Proto3CMDFieldCfg::~Proto3CMDFieldCfg() {
  // @@protoc_insertion_point(destructor:Proto3CMDFieldCfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Proto3CMDFieldCfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  fieldname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  minvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maxvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lua_script_in_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lua_script_out_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Proto3CMDFieldCfg::ArenaDtor(void* object) {
  Proto3CMDFieldCfg* _this = reinterpret_cast< Proto3CMDFieldCfg* >(object);
  (void)_this;
}
void Proto3CMDFieldCfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Proto3CMDFieldCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proto3CMDFieldCfg& Proto3CMDFieldCfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proto3CMDFieldCfg_datastruct_2eproto.base);
  return *internal_default_instance();
}


void Proto3CMDFieldCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto3CMDFieldCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  minvalue_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  maxvalue_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lua_script_in_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lua_script_out_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operabo_out_) -
      reinterpret_cast<char*>(&id_)) + sizeof(operabo_out_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proto3CMDFieldCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fieldIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fieldindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fieldName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fieldname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3CMDFieldCfg.fieldName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fieldSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fieldsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3CMDFieldCfg.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string minValue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_minvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3CMDFieldCfg.minValue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maxValue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_maxvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3CMDFieldCfg.maxValue"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dataType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operation_in = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          operation_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operation_in_num = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          operation_in_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operation_out = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          operation_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operation_out_num = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          operation_out_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operaBO_in = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          operabo_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 operaBO_out = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          operabo_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Lua_Script_in = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_lua_script_in();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3CMDFieldCfg.Lua_Script_in"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Lua_Script_out = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_lua_script_out();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Proto3CMDFieldCfg.Lua_Script_out"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Proto3CMDFieldCfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Proto3CMDFieldCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 fieldIndex = 2;
  if (this->fieldindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fieldindex(), target);
  }

  // string fieldName = 3;
  if (this->fieldname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fieldname().data(), static_cast<int>(this->_internal_fieldname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3CMDFieldCfg.fieldName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_fieldname(), target);
  }

  // int32 fieldSize = 4;
  if (this->fieldsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_fieldsize(), target);
  }

  // string value = 5;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3CMDFieldCfg.value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_value(), target);
  }

  // string minValue = 6;
  if (this->minvalue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_minvalue().data(), static_cast<int>(this->_internal_minvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3CMDFieldCfg.minValue");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_minvalue(), target);
  }

  // string maxValue = 7;
  if (this->maxvalue().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maxvalue().data(), static_cast<int>(this->_internal_maxvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3CMDFieldCfg.maxValue");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_maxvalue(), target);
  }

  // int32 dataType = 8;
  if (this->datatype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_datatype(), target);
  }

  // int32 operation_in = 9;
  if (this->operation_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_operation_in(), target);
  }

  // int32 operation_in_num = 10;
  if (this->operation_in_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_operation_in_num(), target);
  }

  // int32 operation_out = 11;
  if (this->operation_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_operation_out(), target);
  }

  // int32 operation_out_num = 12;
  if (this->operation_out_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_operation_out_num(), target);
  }

  // int32 operaBO_in = 13;
  if (this->operabo_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_operabo_in(), target);
  }

  // int32 operaBO_out = 14;
  if (this->operabo_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_operabo_out(), target);
  }

  // string Lua_Script_in = 15;
  if (this->lua_script_in().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lua_script_in().data(), static_cast<int>(this->_internal_lua_script_in().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3CMDFieldCfg.Lua_Script_in");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_lua_script_in(), target);
  }

  // string Lua_Script_out = 16;
  if (this->lua_script_out().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lua_script_out().data(), static_cast<int>(this->_internal_lua_script_out().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Proto3CMDFieldCfg.Lua_Script_out");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_lua_script_out(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto3CMDFieldCfg)
  return target;
}

size_t Proto3CMDFieldCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto3CMDFieldCfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fieldName = 3;
  if (this->fieldname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fieldname());
  }

  // string value = 5;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string minValue = 6;
  if (this->minvalue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_minvalue());
  }

  // string maxValue = 7;
  if (this->maxvalue().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maxvalue());
  }

  // string Lua_Script_in = 15;
  if (this->lua_script_in().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lua_script_in());
  }

  // string Lua_Script_out = 16;
  if (this->lua_script_out().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lua_script_out());
  }

  // int32 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 fieldIndex = 2;
  if (this->fieldindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fieldindex());
  }

  // int32 fieldSize = 4;
  if (this->fieldsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fieldsize());
  }

  // int32 dataType = 8;
  if (this->datatype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_datatype());
  }

  // int32 operation_in = 9;
  if (this->operation_in() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operation_in());
  }

  // int32 operation_in_num = 10;
  if (this->operation_in_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operation_in_num());
  }

  // int32 operation_out = 11;
  if (this->operation_out() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operation_out());
  }

  // int32 operation_out_num = 12;
  if (this->operation_out_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operation_out_num());
  }

  // int32 operaBO_in = 13;
  if (this->operabo_in() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operabo_in());
  }

  // int32 operaBO_out = 14;
  if (this->operabo_out() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_operabo_out());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proto3CMDFieldCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto3CMDFieldCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const Proto3CMDFieldCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proto3CMDFieldCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto3CMDFieldCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto3CMDFieldCfg)
    MergeFrom(*source);
  }
}

void Proto3CMDFieldCfg::MergeFrom(const Proto3CMDFieldCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto3CMDFieldCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fieldname().size() > 0) {
    _internal_set_fieldname(from._internal_fieldname());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.minvalue().size() > 0) {
    _internal_set_minvalue(from._internal_minvalue());
  }
  if (from.maxvalue().size() > 0) {
    _internal_set_maxvalue(from._internal_maxvalue());
  }
  if (from.lua_script_in().size() > 0) {
    _internal_set_lua_script_in(from._internal_lua_script_in());
  }
  if (from.lua_script_out().size() > 0) {
    _internal_set_lua_script_out(from._internal_lua_script_out());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.fieldindex() != 0) {
    _internal_set_fieldindex(from._internal_fieldindex());
  }
  if (from.fieldsize() != 0) {
    _internal_set_fieldsize(from._internal_fieldsize());
  }
  if (from.datatype() != 0) {
    _internal_set_datatype(from._internal_datatype());
  }
  if (from.operation_in() != 0) {
    _internal_set_operation_in(from._internal_operation_in());
  }
  if (from.operation_in_num() != 0) {
    _internal_set_operation_in_num(from._internal_operation_in_num());
  }
  if (from.operation_out() != 0) {
    _internal_set_operation_out(from._internal_operation_out());
  }
  if (from.operation_out_num() != 0) {
    _internal_set_operation_out_num(from._internal_operation_out_num());
  }
  if (from.operabo_in() != 0) {
    _internal_set_operabo_in(from._internal_operabo_in());
  }
  if (from.operabo_out() != 0) {
    _internal_set_operabo_out(from._internal_operabo_out());
  }
}

void Proto3CMDFieldCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto3CMDFieldCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proto3CMDFieldCfg::CopyFrom(const Proto3CMDFieldCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto3CMDFieldCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proto3CMDFieldCfg::IsInitialized() const {
  return true;
}

void Proto3CMDFieldCfg::InternalSwap(Proto3CMDFieldCfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fieldname_.Swap(&other->fieldname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  minvalue_.Swap(&other->minvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  maxvalue_.Swap(&other->maxvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lua_script_in_.Swap(&other->lua_script_in_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lua_script_out_.Swap(&other->lua_script_out_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proto3CMDFieldCfg, operabo_out_)
      + sizeof(Proto3CMDFieldCfg::operabo_out_)
      - PROTOBUF_FIELD_OFFSET(Proto3CMDFieldCfg, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proto3CMDFieldCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TDSDataPayload::InitAsDefaultInstance() {
}
class TDSDataPayload::_Internal {
 public:
};

void TDSDataPayload::clear_data() {
  data_.Clear();
}
TDSDataPayload::TDSDataPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TDSDataPayload)
}
TDSDataPayload::TDSDataPayload(const TDSDataPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:TDSDataPayload)
}

void TDSDataPayload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TDSDataPayload_datastruct_2eproto.base);
  operation_ = 0;
}

TDSDataPayload::~TDSDataPayload() {
  // @@protoc_insertion_point(destructor:TDSDataPayload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TDSDataPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TDSDataPayload::ArenaDtor(void* object) {
  TDSDataPayload* _this = reinterpret_cast< TDSDataPayload* >(object);
  (void)_this;
}
void TDSDataPayload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TDSDataPayload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TDSDataPayload& TDSDataPayload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TDSDataPayload_datastruct_2eproto.base);
  return *internal_default_instance();
}


void TDSDataPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:TDSDataPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  operation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDSDataPayload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TDSDataPayload.Operation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::TDSDataPayload_Operation>(val));
        } else goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TDSDataPayload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDSDataPayload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TDSDataPayload.Operation operation = 1;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // repeated .google.protobuf.Any data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDSDataPayload)
  return target;
}

size_t TDSDataPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDSDataPayload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any data = 3;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .TDSDataPayload.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TDSDataPayload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TDSDataPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const TDSDataPayload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TDSDataPayload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TDSDataPayload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TDSDataPayload)
    MergeFrom(*source);
  }
}

void TDSDataPayload::MergeFrom(const TDSDataPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TDSDataPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
}

void TDSDataPayload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TDSDataPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDSDataPayload::CopyFrom(const TDSDataPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDSDataPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDSDataPayload::IsInitialized() const {
  return true;
}

void TDSDataPayload::InternalSwap(TDSDataPayload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDSDataPayload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TDSData::InitAsDefaultInstance() {
}
class TDSData::_Internal {
 public:
};

TDSData::TDSData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  payload_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TDSData)
}
TDSData::TDSData(const TDSData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      payload_(from.payload_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table().empty()) {
    table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_table(),
      GetArena());
  }
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:TDSData)
}

void TDSData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TDSData_datastruct_2eproto.base);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_ = 0;
}

TDSData::~TDSData() {
  // @@protoc_insertion_point(destructor:TDSData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TDSData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TDSData::ArenaDtor(void* object) {
  TDSData* _this = reinterpret_cast< TDSData* >(object);
  (void)_this;
}
void TDSData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TDSData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TDSData& TDSData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TDSData_datastruct_2eproto.base);
  return *internal_default_instance();
}


void TDSData::Clear() {
// @@protoc_insertion_point(message_clear_start:TDSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.Clear();
  table_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  flags_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDSData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TDSData.table"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TDSData.Flags flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_flags(static_cast<::TDSData_Flags>(val));
        } else goto handle_unusual;
        continue;
      // repeated .TDSDataPayload payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payload(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TDSData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string table = 1;
  if (this->table().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TDSData.table");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table(), target);
  }

  // .TDSData.Flags flags = 2;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_flags(), target);
  }

  // repeated .TDSDataPayload payload = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_payload_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_payload(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDSData)
  return target;
}

size_t TDSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDSData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TDSDataPayload payload = 3;
  total_size += 1UL * this->_internal_payload_size();
  for (const auto& msg : this->payload_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string table = 1;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // .TDSData.Flags flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TDSData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TDSData)
  GOOGLE_DCHECK_NE(&from, this);
  const TDSData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TDSData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TDSData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TDSData)
    MergeFrom(*source);
  }
}

void TDSData::MergeFrom(const TDSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TDSData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payload_.MergeFrom(from.payload_);
  if (from.table().size() > 0) {
    _internal_set_table(from._internal_table());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void TDSData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TDSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDSData::CopyFrom(const TDSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDSData::IsInitialized() const {
  return true;
}

void TDSData::InternalSwap(TDSData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payload_.InternalSwap(&other->payload_);
  table_.Swap(&other->table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TDSData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Proto3ProtocolTypeCfg* Arena::CreateMaybeMessage< ::Proto3ProtocolTypeCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto3ProtocolTypeCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto3ProtocolFieldCfg* Arena::CreateMaybeMessage< ::Proto3ProtocolFieldCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto3ProtocolFieldCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto3DeviceInfoCfg* Arena::CreateMaybeMessage< ::Proto3DeviceInfoCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto3DeviceInfoCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto3DeviceAllCMD* Arena::CreateMaybeMessage< ::Proto3DeviceAllCMD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto3DeviceAllCMD >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto3DeviceCMDDefine* Arena::CreateMaybeMessage< ::Proto3DeviceCMDDefine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto3DeviceCMDDefine >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto3CMDFieldCfg* Arena::CreateMaybeMessage< ::Proto3CMDFieldCfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Proto3CMDFieldCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::TDSDataPayload* Arena::CreateMaybeMessage< ::TDSDataPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDSDataPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::TDSData* Arena::CreateMaybeMessage< ::TDSData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDSData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
